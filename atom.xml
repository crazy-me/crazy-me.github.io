<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fixblog-侯爽</title>
  
  
  <link href="http://www.fixblog.cn/atom.xml" rel="self"/>
  
  <link href="http://www.fixblog.cn/"/>
  <updated>2021-02-24T06:45:20.903Z</updated>
  <id>http://www.fixblog.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis的常用指令及介绍</title>
    <link href="http://www.fixblog.cn/2019/02/24/redis-basic/"/>
    <id>http://www.fixblog.cn/2019/02/24/redis-basic/</id>
    <published>2019-02-24T06:43:03.000Z</published>
    <updated>2021-02-24T06:45:20.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><ul><li>由于用户量增大，请求数量随之增大数据压力过大</li><li>多台服务器之间数据不同步</li><li>多台服务器之间的锁已经不存在互斥性了</li><li>Redis是NoSql 是一款非关系型数据库</li><li>Redis提供了多种持久化机制性能可达到110000/s读取及81000/s的写入</li><li>Redis提供了主从 哨兵以及集群的搭建方式，可方便横向及垂直扩展</li></ul></blockquote><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml command 代表执行命令</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis.conf:/usr/local/redis/redis.conf</span>  <span class="comment"># 映射配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span>    <span class="comment"># 映射RDB持久化文件到容器外</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>] <span class="comment"># 容器启动时启动redis并加载配置文件</span></span><br></pre></td></tr></table></figure><blockquote><p>Redis基本存储数据的结构</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.key-string：一个key对应一个值</span><br><span class="line">2.key-hash：一个key对应一个Map</span><br><span class="line">3.key-list：一个key对应一个列表可以重复 存取有序</span><br><span class="line">4.key-set：一个key对应一个集合无序不可重复</span><br><span class="line">5.key-zset：一个key对应一个有序集合不可重复</span><br></pre></td></tr></table></figure><blockquote><p>Redis特殊存储数据结构</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.HyperLoglog：用来计算近似值的</span><br><span class="line">2.GEO：地理位置</span><br><span class="line">3.BIT：一般存储的也是字符串，存储的是一个byte[]</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/redis-storage.png" alt="avatar"></p><hr><blockquote><p>String 常用命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加值</span></span><br><span class="line"><span class="built_in">set</span> key value</span><br><span class="line"><span class="comment"># 取值</span></span><br><span class="line">get key</span><br><span class="line"><span class="comment"># 批量操作</span></span><br><span class="line">mset key value key value...  <span class="comment">#每组key value 以空格分开</span></span><br><span class="line">mget key key...</span><br><span class="line"><span class="comment"># 设置值并指定声明周期</span></span><br><span class="line">setex key second value</span><br><span class="line"><span class="comment"># 设置值 如果key存在则什么都不做如果不存在则和set一样</span></span><br><span class="line">setnx key value</span><br><span class="line"><span class="comment"># 在key对应的value后追加内容</span></span><br><span class="line">append key value</span><br><span class="line"><span class="comment"># 查看value字符串的长度</span></span><br><span class="line">strlen key</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自增命令(自增1)</span></span><br><span class="line">incr key</span><br><span class="line"><span class="comment"># 自减命令(自减1)</span></span><br><span class="line">decr key</span><br><span class="line"><span class="comment"># 自增或自减指定数量</span></span><br><span class="line">incrby key increment</span><br><span class="line">decrby key increment</span><br></pre></td></tr></table></figure><blockquote><p>hash 常用命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储数据</span></span><br><span class="line">hset key field value</span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">hget key field</span><br><span class="line"><span class="comment"># 批量操作</span></span><br><span class="line">hmset key field value file value...</span><br><span class="line">hmget key field field...</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自增(指定自增的值)</span></span><br><span class="line">hincrby key field increment</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置值(如果key-field存在则什么都不做否则正常添加)</span></span><br><span class="line">hsetnx key field value</span><br><span class="line"><span class="comment"># 检查field是否存在</span></span><br><span class="line">hexists key field</span><br><span class="line"><span class="comment"># 删除key对应的某一个field,可删除多个field</span></span><br><span class="line">hdel key field field...</span><br><span class="line"><span class="comment"># 获取当前hash结构中的全部field和value</span></span><br><span class="line">hgetall key</span><br><span class="line"><span class="comment"># 获取当前hash结构中的全部field</span></span><br><span class="line">hkeys key</span><br><span class="line"><span class="comment"># 获取当前hash结构中的全部value</span></span><br><span class="line">hvals key</span><br><span class="line"><span class="comment"># 获取当前hash结构中field的数量</span></span><br><span class="line">hlen key</span><br></pre></td></tr></table></figure><hr><blockquote><p>list 常用命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储数据(从左侧插入 可批量)</span></span><br><span class="line">lpush key value value...</span><br><span class="line"><span class="comment"># 存储数据(从右侧插入 可批量)</span></span><br><span class="line">rpush key value value...</span><br><span class="line"><span class="comment"># 存储数据(如果key不存在,什么都不做,如果key存在 但不是list结构 什么都不做 没有批量操作)</span></span><br><span class="line">lpushx key value</span><br><span class="line">rpushx key value</span><br><span class="line"><span class="comment"># 存储数据(在存储数据时指定索引位置,会覆盖之前索引位置的数据 如果指定的索引超出列表的长度会失败)</span></span><br><span class="line">lset key index value</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 弹栈方式获取数据(左侧弹出 右侧弹出)</span></span><br><span class="line">lpop key</span><br><span class="line">rpop key</span><br><span class="line"><span class="comment"># 获取指定索引范围的数据(start 从0开始 stop输入-1 代表最后一个 -2代表倒数第二个)</span></span><br><span class="line">lrange key start stop</span><br><span class="line"><span class="comment"># 获取指定索引位置的数据</span></span><br><span class="line">lindex key index</span><br><span class="line"><span class="comment"># 获取整个列表的长度</span></span><br><span class="line">llen key</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除列表中的数据(删除列表中的count个value值 count大于0 从左向右删除 count小于0从右向左删除 count=0 删除全部的数据)</span></span><br><span class="line">lrem key count value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留列表中的数据(保留指定范围的数据，超出这个返回的数据会被移除)</span></span><br><span class="line">ltrim key start stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个列表中最后一个数据插入到另一个列表的头部位置</span></span><br><span class="line">rpoplpush list1 list2</span><br></pre></td></tr></table></figure><hr><blockquote><p>set 常用命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储数据</span></span><br><span class="line">sadd key member member...</span><br><span class="line"><span class="comment"># 获取全部数据</span></span><br><span class="line">smembers key</span><br><span class="line"><span class="comment"># 随机获取一个数据(count 默认为1代表弹出的数量)</span></span><br><span class="line">spop key count</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交集(取多个集合的交集)</span></span><br><span class="line">sinter set1 set2...</span><br><span class="line"><span class="comment"># 并集(获取全部集合中的数据)</span></span><br><span class="line">sunion set1 set2...</span><br><span class="line"><span class="comment"># 差集(获取多个集合中不一样的数据)</span></span><br><span class="line">sdiff set1 set2...</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">srem key member member...</span><br><span class="line"><span class="comment"># 查看当前的集合中是否包含这个值</span></span><br><span class="line">sismember key member</span><br></pre></td></tr></table></figure><hr><blockquote><p>zset 常用命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存储数据(score必须是数值 member不可重复)</span></span><br><span class="line">zadd key score member member...</span><br><span class="line"><span class="comment"># 修改member的分(如果member是存在于key中 正常增加分数 如果不存在则相当于zadd)</span></span><br><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定member的分数</span></span><br><span class="line">zscore key member</span><br><span class="line"><span class="comment"># 获取zset中的数量</span></span><br><span class="line">zcard key</span><br><span class="line"><span class="comment"># 根据score的范围查看member数量</span></span><br><span class="line">zcount key min max</span><br><span class="line"><span class="comment"># 删除zset中的成员</span></span><br><span class="line">zrem key member member...</span><br><span class="line"><span class="comment"># 根据分数从小到大排序获取指定范围的数据(withscores如果添加这个参数 那么会返回member对应的分数)</span></span><br><span class="line">zrange key start stop [withscores]</span><br><span class="line"><span class="comment"># 根据分数从大到小排序获取指定范围的数据(withscores如果添加这个参数 那么会返回member对应的分数)</span></span><br><span class="line">zrevrange key start stop [withscores]</span><br><span class="line"><span class="comment"># 根据分数的范围获取数据member(withscores代表同时返回score，limit和mysql一样)</span></span><br><span class="line">zrangebyscore key min max [withscores][<span class="built_in">limit</span> offset count]</span><br><span class="line"><span class="comment"># 根据分数的范围获取数据member(withscores代表同时返回score，limit和mysql一样)</span></span><br><span class="line">zrangebyscore key max min [withscores][<span class="built_in">limit</span> offset count]</span><br></pre></td></tr></table></figure><hr><blockquote><p>key 常用命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看redis中全部的key(pattern: * | xxx* | *xxx)</span></span><br><span class="line">keys pattern</span><br><span class="line"><span class="comment"># 查看某一个key是否存在</span></span><br><span class="line">exists key</span><br><span class="line"><span class="comment"># 删除key</span></span><br><span class="line">del key key...</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置key的生成时间(单位秒 和毫秒 设置还能活多久)</span></span><br><span class="line">expire key second</span><br><span class="line">pexpire key milliseconds</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置key的生存时间(单位秒和毫秒 设置能活到什么时候)</span></span><br><span class="line">expireat key timestamp</span><br><span class="line">pexpireat key milliseconds</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看key 剩余生存时间(单位秒 返回-2 &quot;key不存在&quot; -1 &quot;当前key没有设置时间&quot;)</span></span><br><span class="line">ttl key</span><br><span class="line"><span class="comment"># 查看key 剩余生存时间(单位毫秒 返回-2 &quot;key不存在&quot; -1 &quot;当前key没有设置时间&quot;)</span></span><br><span class="line">pttl key</span><br><span class="line"><span class="comment"># 移除key的生存时间(返回 1 &quot;移除成功&quot; 0 &quot;不存在或key不存在&quot;)</span></span><br><span class="line">persist key</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择操作的库</span></span><br><span class="line">select 0~15</span><br><span class="line"><span class="comment"># 移动key到另一个库</span></span><br><span class="line">move key db</span><br></pre></td></tr></table></figure><blockquote><p>库的常用命令</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清空当前所在的库</span></span><br><span class="line">flushdb</span><br><span class="line"><span class="comment"># 清空全部的库</span></span><br><span class="line">flushall</span><br><span class="line"><span class="comment"># 查看当前库中有多少key</span></span><br><span class="line">dbsize</span><br><span class="line"><span class="comment"># 查看最后一次操作时间(返回时间戳)</span></span><br><span class="line">lastsave</span><br><span class="line"><span class="comment"># 实时监听Redis服务接收到的命令(用于调试)</span></span><br><span class="line">monitor</span><br></pre></td></tr></table></figure><hr><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><blockquote><ul><li>RDB持久化是redis默认的方式 速度比较快，以二进制文件存储</li><li>RDB持久化无法保证数据的绝对安全</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RDB持久化配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># save 配置代表RDB执行的时机</span></span><br><span class="line">save 900 1                 <span class="comment"># 900秒之内有1个key改变了就执行RDB持久化</span></span><br><span class="line">save 300 10                <span class="comment"># 300秒之内有10个key改变了就执行RDB持久化</span></span><br><span class="line">save 60 10000              <span class="comment"># 60秒之内有10000个key改变了就执行RDB持久化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启RDB持久化的压缩</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment">#RDB持久化文件的名称</span></span><br><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><hr><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><blockquote><ul><li>AOF持久化机制默认是关闭的 官方推荐同时开启RDB和AOF持久化 保证数据安全。</li><li>AOF持久化的速度相对较慢，它存储的是一个文本文件，到了后期文件会比较大，传输困难。</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AOF持久化配置</span></span><br><span class="line">appendonly no                        <span class="comment"># 开启AOF持久化 默认关闭</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span>      <span class="comment"># AOF文件的名称</span></span><br><span class="line"><span class="comment"># AOF持久化执行时机(以下三个配置只能三选一)</span></span><br><span class="line">appendfsync always       <span class="comment"># 每执行一次写操作，立即持久化到AOF文件中，性能较低</span></span><br><span class="line">appendfsync everysec     <span class="comment"># 每秒执行一次持久化（推荐）</span></span><br><span class="line">appendfsync no           <span class="comment"># 会根据操作系统不同，环境不同 在一定时间内执行一次持久化（不安全）</span></span><br></pre></td></tr></table></figure><h3 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h3><blockquote><ul><li>Redis事物：一次事物操作，该成功的成功，该失败的失败</li><li>先开启事物 执行一系列的命令 但是这些命令不会立即执行 它会被放在一个队列中，如果你执行事物 这个队列中的命令全部执行，如果取消了事物，一个队列中的命令全部作废。</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis 事物操作</span></span><br><span class="line">1. 开启事物：mnlti</span><br><span class="line">2. 输入要执行的命令：会被放入到一个队列中</span><br><span class="line">3. 执行事物：<span class="built_in">exec</span></span><br><span class="line">4. 取消事物：discard</span><br><span class="line"><span class="comment"># Redis的事物想发挥它的功能 需要配合watch(监听机制使用)</span></span><br><span class="line">在开启事物之前，先通过watch命令去监听一个或多个key,在开启事物之后如果有其他客户端修改了监听的key</span><br><span class="line">那么事物会自动取消。</span><br><span class="line">如果执行了事物，或者取消了事物，watch监听自动消除，不需要手动执行unwatch。</span><br></pre></td></tr></table></figure><hr><h3 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h3><blockquote><p>单机版存在读写瓶颈的问题</p><p>master：读/写</p><p>slave：读</p></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/redis-master.png" alt="avatar"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">redis1:</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6001</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis1.conf:/usr/local/redis/redis.conf</span>  <span class="comment"># 映射配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span>    <span class="comment"># 映射RDB持久化文件到容器外</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>] </span><br><span class="line">  <span class="attr">redis2:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis2</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6002</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis2.conf:/usr/local/redis/redis.conf</span>  <span class="comment"># 映射配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span>    <span class="comment"># 映射RDB持久化文件到容器外</span></span><br><span class="line">    <span class="attr">links:</span> <span class="comment"># 配置能找到master</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1:master</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>] </span><br><span class="line">  <span class="attr">redis3:</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6003</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis3.conf:/usr/local/redis/redis.conf</span>  <span class="comment"># 映射配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span>    <span class="comment"># 映射RDB持久化文件到容器外</span></span><br><span class="line">    <span class="attr">links:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1:master</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>] </span><br><span class="line">  </span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># redis2 redis3从节点配置指定master节点</span><br><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><blockquote><p>哨兵 解决在master节点宕机时导致无法写问题</p></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/redis-sentinel.png"></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哨兵模式docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6001</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis1.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/sentinel1.conf:/data/sentinel.conf</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  <span class="attr">redis2:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis2</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6002</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis2.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/sentinel2.conf:/data/sentinel.conf</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1:master</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  <span class="attr">redis3:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6003</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis3.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/sentinel3.conf:/data/sentinel.conf</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1:master</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哨兵配置文件 sentinel.conf</span></span><br><span class="line">daemonize yes              <span class="comment"># 后台启动</span></span><br><span class="line"><span class="comment"># 指定Master节点的IP和端口(主)</span></span><br><span class="line">sentinel monitor master(主节点名称) localhost(ip或别名) 6379(端口) 2(从节点数量)</span><br><span class="line"><span class="comment"># 指定slave节点的IP和端口(从)</span></span><br><span class="line">sentinel monitor master master 6379 2</span><br><span class="line"><span class="comment"># 哨兵 每隔多久监听一次redis架构默认30秒</span></span><br><span class="line">sentinel down-after-milliseconds master 30000</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哨兵配置数据卷</span></span><br><span class="line">- ./conf/sentinel1.conf:/data/sentinel.conf</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动哨兵sentinel</span></span><br><span class="line">redis-sentinel sentinel.conf</span><br></pre></td></tr></table></figure><hr><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><blockquote><p> Redis集群在保证主从加哨兵的基本功能之外，还能够提升Redis的存储数据的能力。</p><p>Redis集群是无中心化的，有一个ping-pang机制</p></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/redis-cluster.png" alt="avatar"></p><hr><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">7001</span><span class="string">:7001</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17001</span><span class="string">:17001</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis1.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  <span class="attr">redis2:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis2</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">7002</span><span class="string">:7002</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17002</span><span class="string">:17002</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis2.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  <span class="attr">redis3:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">7003</span><span class="string">:7003</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17003</span><span class="string">:17003</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis3.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  <span class="attr">redis4:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis4</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">7004</span><span class="string">:7004</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17004</span><span class="string">:17004</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis4.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  <span class="attr">redis5:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis5</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">7005</span><span class="string">:7005</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17005</span><span class="string">:17005</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis5.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  <span class="attr">redis6:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/redis:5.0.9</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis6</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">7006</span><span class="string">:7006</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">17006</span><span class="string">:17006</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis6.conf:/usr/local/redis/redis.conf</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/redis.conf&quot;</span>]</span><br><span class="line">  </span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建conf文件及 redis.conf</span><br><span class="line"># 指定Redis的端口号</span><br><span class="line">port 7001</span><br><span class="line"># 开启Redis集群</span><br><span class="line">cluster-enabled yes</span><br><span class="line"># 集群信息的文件</span><br><span class="line">cluster-config-file nodes-7001.conf</span><br><span class="line"># 集群的对外IP地址</span><br><span class="line">cluster-announce-ip 192.168.1.1</span><br><span class="line"># 集群的对外端口</span><br><span class="line">cluster-announce-port 7001</span><br><span class="line"># 集群的对外总线端口</span><br><span class="line">cluster-announce-bus-port</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Redis集群(6个节点)</span></span><br><span class="line">docker-compose up -d </span><br><span class="line"><span class="comment"># 随便进入一个容器内 使用redis-cli管理集群 --cluster-replicas 表示每个主节点下有几个从节点</span></span><br><span class="line">redis-cli --cluster create 192.168.1.1:7001 192.168.1.1:7002 192.168.1.1:7003 192.168.1.1:7004 192.168.1.1:7005 192.168.1.1:7006 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端不能使用localhost的方式连接集群需指定IP:端口 （-c参数表示连接成功后在各个节点之间来回切换）</span></span><br><span class="line">redis-cli -h 192.168.1.1 -p 7001 -c</span><br></pre></td></tr></table></figure><h3 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h3><blockquote><p>Redis key的生存时间过期后不会马上删除而是有删除策略</p><ul><li>定期删除<ul><li>Redis每隔一段时间就会去查看设置了过期时间的key，会在100ms的间隔中默认查看3个key。</li></ul></li><li>惰性删除<ul><li>当查询一个已经过期的key时，Redis会先查看当前key的生存时间是否已经到了，直接删除当前key并给用户返回一个空值。</li></ul></li></ul></blockquote><h3 id="淘汰机制"><a href="#淘汰机制" class="headerlink" title="淘汰机制"></a>淘汰机制</h3><blockquote><p>在Redis内存已经满的时候，添加了一个新的数据就会执行淘汰机制</p><ul><li>volatile-lru：<ul><li>在内存不足时，Redis会在设置过生存时间的key中删除一个最近最少使用的key。</li></ul></li><li>allkeys-lru：<ul><li>在内存不足时，Redis会在全部的key中删除一个最近最少使用的key。</li></ul></li><li>volatile-lfu：<ul><li>在内存不足时，Redis会在设置过生存时间的key中删除一个最近最少频次使用的key。</li></ul></li><li>allkeys-lfu：<ul><li>在内存不足时，Redis会在全部的key中删除一个最近最少频次使用的key。</li></ul></li><li>volatile-random：<ul><li>在内存不足时，Redis会在设置过生存时间的key中随机删除一个key。</li></ul></li><li>allkeys-random：<ul><li>在内存不足时，Redis会在全部的key中随机删除一个key。</li></ul></li><li>volatile-ttl：<ul><li>在内存不足时，Redis会在设置过生存时间的key中删除一个剩余生存时间最少的一个key。</li></ul></li><li>no eviction：（默认）<ul><li>在内存不足时，直接报错</li></ul></li></ul><p>指定淘汰机制的方式：maxmemory-policy 具体策略</p><p>设置Redis的最大内存：maxmemory 字节大小为单位的数值</p></blockquote><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;由于用户量增大，请求数量随之增大数据压力过大&lt;/li&gt;
&lt;li&gt;多台服务器之间数据不同步&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="redis" scheme="http://www.fixblog.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Go语言defer的那些事儿</title>
    <link href="http://www.fixblog.cn/2019/02/03/go-defer/"/>
    <id>http://www.fixblog.cn/2019/02/03/go-defer/</id>
    <published>2019-02-03T03:13:23.000Z</published>
    <updated>2021-02-24T06:58:33.708Z</updated>
    
    <content type="html"><![CDATA[<h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>defer执行时机</li><li>defer执行顺序</li><li>defer与return谁先谁后</li><li>函数包含多个Panic，defer中recover处理那个Panic</li><li>函数返回值遇到defer</li><li>defer遇到Panic<ul><li>defer遇到Panic，但是并不捕获异常的情况</li><li>defer遇到Panic，并捕获异常</li></ul></li><li>练习：defer面试题</li><li>闲聊</li><li>欢迎加入我的公众号【迈莫coding】 一起pk大厂</li></ul><h1 id="defer执行时机"><a href="#defer执行时机" class="headerlink" title="defer执行时机"></a>defer执行时机</h1><ul><li>return 语句执行完之后，如果有 defer 语句，再执行 defer 语句</li><li>发生 Panic ，也会触发 defer 执行</li></ul><h1 id="defer执行顺序"><a href="#defer执行顺序" class="headerlink" title="defer执行顺序"></a>defer执行顺序</h1><blockquote><p>多个defer出现时，会以”先进后出，后进先出”的规则来执行，类似于数据结构中栈的执行顺序.</p></blockquote><p><strong>示例：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">B</span><br><span class="line">A</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="defer与return谁先谁后"><a href="#defer与return谁先谁后" class="headerlink" title="defer与return谁先谁后"></a>defer与return谁先谁后</h1><p><strong>示例代码</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;defer func&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnFunc</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;return func&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnAndDefer</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> deferFunc()</span><br><span class="line">  <span class="keyword">return</span> returnFunc()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  returnAndDefer()</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span></span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span></span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个函数中即有<span class="keyword">return</span>语句，也有<span class="keyword">defer</span>语句，先执行<span class="keyword">return</span>语句，后执行<span class="keyword">defer</span>语句</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="函数包含多个Panic，defer中recover处理那个Panic"><a href="#函数包含多个Panic，defer中recover处理那个Panic" class="headerlink" title="函数包含多个Panic，defer中recover处理那个Panic"></a>函数包含多个Panic，defer中recover处理那个Panic</h1><p><strong>示例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;defer panic&quot;</span>)</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="built_in">panic</span>(<span class="string">&quot;main panic&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="built_in">panic</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">只有最后一个<span class="built_in">panic</span>，可以被<span class="built_in">recover</span>捕获到.</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="函数返回值遇到defer"><a href="#函数返回值遇到defer" class="headerlink" title="函数返回值遇到defer"></a>函数返回值遇到defer</h1><p><strong>示例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deferFunc</span><span class="params">()</span> <span class="params">(t <span class="keyword">int</span>)</span></span> &#123; <span class="comment">// t初始化为0，并且作用域为该函数全域</span></span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t = t * <span class="number">10</span></span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(deferFunc())</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结论</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当调用deferFunc()函数时，本应该返回值<span class="number">1</span>，但函数中还有<span class="keyword">defer</span>语句，</span><br><span class="line">所以在<span class="keyword">return</span>语句之后，又被<span class="keyword">defer</span>的匿名函数<span class="function"><span class="keyword">func</span>函数执行，</span></span><br><span class="line">所以t=t*<span class="number">10</span>被执行。因此返回值为<span class="number">10.</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="defer遇到Panic"><a href="#defer遇到Panic" class="headerlink" title="defer遇到Panic"></a>defer遇到Panic</h1><h2 id="defer遇到Panic，但是并不捕获异常的情况"><a href="#defer遇到Panic，但是并不捕获异常的情况" class="headerlink" title="defer遇到Panic，但是并不捕获异常的情况"></a>defer遇到Panic，但是并不捕获异常的情况</h2><p><strong>示例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defer_panic</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;defer: panic() 执行1&quot;</span>)</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">     fmt.Println(<span class="string">&quot;defer: panic() 执行2&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">panic</span>(<span class="string">&quot;发生异常&quot;</span>)</span><br><span class="line">  fmt.Println(<span class="string">&quot;该条语句无法执行&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  defer_panic()</span><br><span class="line">  fmt.Println(<span class="string">&quot;main函数执行完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>: <span class="built_in">panic</span>() 执行<span class="number">2</span></span><br><span class="line"><span class="keyword">defer</span>: <span class="built_in">panic</span>() 执行<span class="number">1</span></span><br><span class="line"><span class="built_in">panic</span>: 发生异常</span><br><span class="line"><span class="comment">// 异常信息...</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="defer遇到Panic，但捕获异常的情况"><a href="#defer遇到Panic，但捕获异常的情况" class="headerlink" title="defer遇到Panic，但捕获异常的情况"></a>defer遇到Panic，但捕获异常的情况</h2><p><strong>示例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defer_panic</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;defer: panic() 执行1&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">     fmt.Println(<span class="string">&quot;defer: panic() 执行2&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">panic</span>(<span class="string">&quot;发生异常&quot;</span>)</span><br><span class="line">  fmt.Println(<span class="string">&quot;该条语句无法执行&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  defer_panic()</span><br><span class="line">  fmt.Println(<span class="string">&quot;main函数执行完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>: <span class="built_in">panic</span>() 执行<span class="number">2</span></span><br><span class="line"><span class="keyword">defer</span>: <span class="built_in">panic</span>() 执行<span class="number">1</span></span><br><span class="line">发生异常</span><br><span class="line">main函数执行完成</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h1 id="练习：defer面试题"><a href="#练习：defer面试题" class="headerlink" title="练习：defer面试题"></a>练习：defer面试题</h1><p><strong>1. 下面代码输出什么？</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">   fmt.Println(name)</span><br><span class="line">   <span class="keyword">defer</span> fmt.Println(name)</span><br><span class="line">   name = <span class="string">&quot;lisa&quot;</span></span><br><span class="line">   fmt.Println(name)</span><br><span class="line">   <span class="keyword">defer</span> fmt.Println(name)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>考点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>和函数组合调⽤方式 </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhangsan lisa lisa zhangsan </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>2. 程序运行结果</strong></p><blockquote><p>示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   defer_call()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defer_call</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;迈&quot;</span>) &#125;()</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;莫&quot;</span>) &#125;()</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;coding&quot;</span>) &#125;()</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>考点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>和函数组合调⽤方式 </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">coding</span><br><span class="line">莫</span><br><span class="line">迈</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>3. 下面代码输出什么？</strong></p><blockquote><p>示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeferFunc1</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="params">(t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    t = i</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        t += <span class="number">3</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(DeferFunc1(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>考点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>和函数组合调⽤方式 </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>执行过程</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 将返回值t赋值为行参i，t = <span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 执行<span class="keyword">return</span>语句，将t 赋值给t</span><br><span class="line"><span class="number">3.</span> 执行<span class="keyword">defer</span>语句，t + <span class="number">3</span> = <span class="number">4</span></span><br><span class="line"><span class="number">4.</span> 返回值<span class="number">4</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>4. 下面代码输出什么？</strong></p><blockquote><p>示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeferFunc2</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    t := i</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        t += <span class="number">3</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(DeferFunc2(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>考点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>和函数组合调⽤方式 </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>执行过程</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 创建变量t并将其赋值为i的值，t = <span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 执行<span class="keyword">return</span>语句，注意这里是将t赋值给返回值，此时返回值为<span class="number">1</span>（这个返回值并不是t）</span><br><span class="line"><span class="number">3.</span>执行<span class="keyword">defer</span>语句，t = t + <span class="number">3</span> = <span class="number">4</span></span><br><span class="line"><span class="number">4.</span> 函数返回值<span class="number">1</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>5. 下面代码输出什么？</strong></p><blockquote><p>示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeferFunc3</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="params">(t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        t += i</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(DeferFunc3(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>考点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>和函数组合调⽤方式 </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>执行过程</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 首先将t赋值为<span class="number">2</span></span><br><span class="line"><span class="number">2.</span> 执行<span class="keyword">defer</span>语句，t = t + <span class="number">1</span> = <span class="number">3</span></span><br><span class="line"><span class="number">3.</span> 函数返回值<span class="number">3</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p><strong>6. 下面代码输出什么？</strong></p><blockquote><p>示例</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeferFunc4</span><span class="params">()</span> <span class="params">(t <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">        fmt.Println(t)</span><br><span class="line">    &#125;(t)</span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    DeferFunc4()</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>考点</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span>和函数组合调⽤方式 </span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><blockquote><p>执行过程</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 初始化返回值t为零值 <span class="number">0</span></span><br><span class="line"><span class="number">2.</span> 首先执行<span class="keyword">defer</span>的第一步，赋值<span class="keyword">defer</span>中的<span class="function"><span class="keyword">func</span>入参<span class="title">t</span>为0</span></span><br><span class="line"><span class="number">3.</span> 执行<span class="keyword">defer</span>的第二步，将<span class="keyword">defer</span>压栈</span><br><span class="line"><span class="number">4.</span> 将t赋值为<span class="number">1</span></span><br><span class="line"><span class="number">5.</span> 执行<span class="keyword">return</span>语句，将返回值t赋值为<span class="number">2</span></span><br><span class="line"><span class="number">6.</span> 执行<span class="keyword">defer</span>的第三步，出栈并执行</span><br><span class="line"><span class="number">7.</span> 因为在入栈时<span class="keyword">defer</span>执行的<span class="function"><span class="keyword">func</span>的入参已经赋值了，此时它作为的是一个形式参数，所以打印为0；</span></span><br><span class="line"><span class="number">8.</span> 相对应的因为最后已经将t的值修改为<span class="number">2</span>，所以再打印一个<span class="number">2</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;defer&quot;&gt;&lt;a href=&quot;#defer&quot; class=&quot;headerlink&quot; title=&quot;defer&quot;&gt;&lt;/a&gt;defer&lt;/h4&gt;&lt;h1 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目</summary>
      
    
    
    
    
    <category term="Go" scheme="http://www.fixblog.cn/tags/Go/"/>
    
    <category term="defer" scheme="http://www.fixblog.cn/tags/defer/"/>
    
  </entry>
  
  <entry>
    <title>Go的灵魂拷问</title>
    <link href="http://www.fixblog.cn/2019/01/24/go-basic/"/>
    <id>http://www.fixblog.cn/2019/01/24/go-basic/</id>
    <published>2019-01-24T12:09:23.000Z</published>
    <updated>2021-02-24T06:51:53.440Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-defer执行顺序"><a href="#1-defer执行顺序" class="headerlink" title="1. defer执行顺序"></a>1. defer执行顺序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func call() &#123;</span><br><span class="line">    defer func() &#123;fmt.Println(&quot;打印前&quot;)&#125;()</span><br><span class="line">    defer func() &#123;fmt.Println(&quot;打印中&quot;)&#125;()</span><br><span class="line">    defer func() &#123;fmt.Println(&quot;打印后&quot;)&#125;()</span><br><span class="line">    </span><br><span class="line">    panic(&quot;触发异常&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-foreach-以下代码的问题及原因"><a href="#2-foreach-以下代码的问题及原因" class="headerlink" title="2. foreach 以下代码的问题及原因"></a>2. foreach 以下代码的问题及原因</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type student struct &#123;</span><br><span class="line">    Name string</span><br><span class="line">    Age int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func pase_student() &#123;</span><br><span class="line">    m :&#x3D; make(map[string]*student)</span><br><span class="line">    stus :&#x3D; []student&#123;</span><br><span class="line">        &#123;Name: &quot;周&quot;, Age: 22&#125;</span><br><span class="line">        &#123;Name: &quot;王&quot;, Age: 23&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for _, stu :&#x3D; range stus &#123;</span><br><span class="line">        m[stu.Name] &#x3D; &amp;stu</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-随机性和闭包-以下代码的输出及原因"><a href="#3-随机性和闭包-以下代码的输出及原因" class="headerlink" title="3. 随机性和闭包 以下代码的输出及原因"></a>3. 随机性和闭包 以下代码的输出及原因</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    runtime.GOMAXPROCS(1)</span><br><span class="line">    wg :&#x3D; sync.WaitGroup&#123;&#125;</span><br><span class="line">    wg.Add(20)</span><br><span class="line">    for i :&#x3D; 0; i &lt; 10; i++ &#123;</span><br><span class="line">        go func() &#123;</span><br><span class="line">            fmt.Print(&quot;A: &quot;, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">    for i :&#x3D; 0; i &lt; 10; i++ &#123;</span><br><span class="line">        go func(i int) &#123;</span><br><span class="line">            fmt.Print(&quot;B: &quot;, i)</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;  </span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-组合继承-以下代码输出什么"><a href="#4-组合继承-以下代码输出什么" class="headerlink" title="4.组合继承 以下代码输出什么"></a>4.组合继承 以下代码输出什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">type People struct &#123;&#125;</span><br><span class="line"></span><br><span class="line">func (p *People) ShowA() &#123;</span><br><span class="line">    fmt.Prinln(&quot;showA&quot;)</span><br><span class="line">    p.ShowB()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (p *People) ShowB() &#123;</span><br><span class="line">    fmt.Println(&quot;showB&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Teacher struct &#123;</span><br><span class="line">   People</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (t *Teacher) ShowB() &#123;</span><br><span class="line">    fmt.Println(&quot;teacher showB&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    t :&#x3D; Teacher&#123;&#125;</span><br><span class="line">    t.ShowA()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-select-随机性-下面代码会触发异常吗"><a href="#5-select-随机性-下面代码会触发异常吗" class="headerlink" title="5.select 随机性 下面代码会触发异常吗"></a>5.select 随机性 下面代码会触发异常吗</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    runtime.GOMAXPROCS(1)</span><br><span class="line">    int_chan :&#x3D; make(chan int, 1)</span><br><span class="line">    string_chan :&#x3D; make(chan string, 1)</span><br><span class="line">    int_chan &lt;- 1</span><br><span class="line">    string_chan &lt;- &quot;hello&quot;</span><br><span class="line">    select &#123;</span><br><span class="line">        case value :&#x3D; &lt;- int_chan:</span><br><span class="line">            fmt.Println(value)</span><br><span class="line">    case value :&#x3D; &lt;- string_chan:</span><br><span class="line">        panic(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-defer执行顺序-下面代码会输出什么"><a href="#6-defer执行顺序-下面代码会输出什么" class="headerlink" title="6. defer执行顺序  下面代码会输出什么"></a>6. defer执行顺序  下面代码会输出什么</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">func calc(index string, a, b int) int &#123;</span><br><span class="line">    ret :&#x3D; a + b</span><br><span class="line">    fmt.Println(index, a, b, ret)</span><br><span class="line">    return ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    a :&#x3D; 1</span><br><span class="line">    b :&#x3D; 2</span><br><span class="line">    defer calc(&quot;1&quot;, a, calc(&quot;10&quot;, a, b))</span><br><span class="line">    a &#x3D; 0</span><br><span class="line">    defer calc(&quot;2&quot;, a, calc(&quot;20&quot;, a, b))</span><br><span class="line">    b &#x3D; 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-make默认值及append"><a href="#7-make默认值及append" class="headerlink" title="7. make默认值及append"></a>7. make默认值及append</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    s :&#x3D; make([]int, 5)</span><br><span class="line">    s &#x3D; append(s, 1,2,3)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-map线程安全"><a href="#8-map线程安全" class="headerlink" title="8. map线程安全"></a>8. map线程安全</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">type UserAges struct &#123;</span><br><span class="line">ages map[string]int</span><br><span class="line">sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *UserAges) Add(name string, age int) &#123;</span><br><span class="line">u.Lock()</span><br><span class="line">defer u.Unlock()</span><br><span class="line">u.ages[name] &#x3D; age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (u *UserAges) Get(name string) int &#123;</span><br><span class="line">if age, ok :&#x3D; u.ages[name]; ok &#123;</span><br><span class="line">return age</span><br><span class="line">&#125;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-interface内部结构"><a href="#9-interface内部结构" class="headerlink" title="9. interface内部结构"></a>9. interface内部结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">type People interface &#123;</span><br><span class="line">    show()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Student struct &#123;&#125;</span><br><span class="line"></span><br><span class="line">func (stu *Student) show() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func live() People &#123;</span><br><span class="line">    var stu *Student</span><br><span class="line">    return stu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    if live() &#x3D;&#x3D; nil &#123;</span><br><span class="line">        fmt.Println(&quot;AAA&quot;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        fmt.Println(&quot;BBB&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-defer执行顺序&quot;&gt;&lt;a href=&quot;#1-defer执行顺序&quot; class=&quot;headerlink&quot; title=&quot;1. defer执行顺序&quot;&gt;&lt;/a&gt;1. defer执行顺序&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta</summary>
      
    
    
    
    
    <category term="Go" scheme="http://www.fixblog.cn/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>记录docker的基本操作</title>
    <link href="http://www.fixblog.cn/2019/01/18/docker-basic/"/>
    <id>http://www.fixblog.cn/2019/01/18/docker-basic/</id>
    <published>2019-01-18T02:09:06.000Z</published>
    <updated>2021-02-24T06:47:05.421Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docker中央仓库"><a href="#Docker中央仓库" class="headerlink" title="Docker中央仓库"></a>Docker中央仓库</h3><blockquote><p>1.Docker 官方的中央仓库 下载速度慢 <a href="https://hub.docker.com/?_blank">官方镜像</a></p><p>2.国内的镜像网站 <a href="https://c.163.com/hub?_blank">网易蜂巢</a>  <a href="https://hub.daocloud.io/?_blank">daoCloud</a></p></blockquote><h3 id="镜像的操作"><a href="#镜像的操作" class="headerlink" title="镜像的操作"></a>镜像的操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像到本地</span></span><br><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line">docker pull https://hub.daocloud.io</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看全部本地镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地镜像</span></span><br><span class="line">docker rmi 镜像的标示</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 镜像的导入导出</span></span><br><span class="line"><span class="comment"># 将本地的命令导出</span></span><br><span class="line">docker save -o 导出的路径 镜像的ID</span><br><span class="line"><span class="comment"># 加载本地的镜像文件</span></span><br><span class="line">docker load -i 镜像文件</span><br><span class="line"><span class="comment"># 修改镜像名称</span></span><br><span class="line">docker tag 镜像ID 新镜像名称:版本</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除docker镜像缓存</span></span><br><span class="line">docker system prune --volumes</span><br><span class="line">该命令清除：</span><br><span class="line"></span><br><span class="line">所有停止的容器</span><br><span class="line">所有不被任何一个容器使用的网络</span><br><span class="line">所有不被任何一个容器使用的volume</span><br><span class="line">所有无实例的镜像</span><br></pre></td></tr></table></figure><h3 id="容器的操作"><a href="#容器的操作" class="headerlink" title="容器的操作"></a>容器的操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">docker run 镜像的标示 镜像名称[:tag]</span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像标示</span><br><span class="line"><span class="comment"># -d：代表后台运行容器</span></span><br><span class="line"><span class="comment"># -p：宿主机端口:容器端口 映射宿主机端口到容器端口</span></span><br><span class="line"><span class="comment"># --name：指定容器的名称</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看正在运行的容器</span></span><br><span class="line">docker ps [-qa]</span><br><span class="line"><span class="comment"># -a：查看全部的容器 包括没有运行的</span></span><br><span class="line"><span class="comment"># -q：只查看容器的标示</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">docker logs -f 容器ID</span><br><span class="line"><span class="comment"># -f：滚动查看最后几行日志</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器ID /bin/bash</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器（需先停止容器）</span></span><br><span class="line">docker stop 容器ID</span><br><span class="line"><span class="comment"># 停止全部的容器</span></span><br><span class="line">docker stop $(docker ps -qa)</span><br><span class="line"><span class="comment"># 删除指定容器</span></span><br><span class="line">docker rm 容器ID</span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker rm $(docker ps -qa)</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker start 容器ID</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将宿主机文件复制到容器内部</span></span><br><span class="line">docker cp 文件名称 容器ID:容器内路径</span><br></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><blockquote><p>将宿主机中的一个目录映射到容器中的一个目录,可以在宿主机中操作这个目录，容器中也会随着改变</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据卷</span></span><br><span class="line">docker volume create 数据卷名称</span><br><span class="line"><span class="comment"># 创建数据卷之后默认会存放在一个目录下 /var/lib/docker/volumes/数据卷名称/_data</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据卷的详细信息</span></span><br><span class="line">docker volume inspect 数据卷名称</span><br><span class="line"><span class="comment"># 查看全部数据卷</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># 删除数据卷</span></span><br><span class="line">docker volume rm 数据卷名称</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用数据卷</span></span><br><span class="line"><span class="comment"># 当你映射数据卷时如果不存在，docker会自动创建数据卷(会将容器内部自带的文件存储在默认的数据卷中)</span></span><br><span class="line">docker run -v 数据卷名称:容器内部的路径 镜像ID</span><br><span class="line"><span class="comment"># 直接指定一个路径作为数据卷的存放位置（路径下是空的需要手动指定容器中的文件）</span></span><br><span class="line">docker run -v 路径:容器内部的路径 镜像ID</span><br></pre></td></tr></table></figure><hr><h3 id="Docker自定义镜像"><a href="#Docker自定义镜像" class="headerlink" title="Docker自定义镜像"></a>Docker自定义镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个Dockerfile文件,并且指定自定义镜像信息</span></span><br><span class="line"><span class="comment"># Dockerfile文件中常用内容</span></span><br><span class="line">from：指定当前自定义镜像依赖的环境</span><br><span class="line">copy：将相对路径下的内容复制到自定义镜像中</span><br><span class="line">workdir：声明镜像的默认工作目录</span><br><span class="line">cmd：需要执行的命令 (在workdir下执行的 cmd可以写多个只以最后一个为准)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile文件简单例子</span></span><br><span class="line">from daocloud.io/library/tomcat:8.5.15-jre8  <span class="comment"># 一个tomcat的镜像</span></span><br><span class="line">copy test.txt /usr/<span class="built_in">local</span>/tomcat//webapps     <span class="comment"># 将文件复制到自定义镜像中</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行Dockerfile文件制作镜像</span></span><br><span class="line">docker build -t 镜像名称:版本 .  <span class="comment"># .代表吧当前目录下的Dockerfile文件制作成镜像</span></span><br></pre></td></tr></table></figure><hr><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker-Compose 批量管理容器 只通过compose.yml文件维护</span></span><br><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><br><span class="line"><span class="comment"># 修改文件名称加执行权限</span></span><br><span class="line">mv docker-compose-Linux-x86_64 /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x docker-compose</span><br></pre></td></tr></table></figure><hr><blockquote><p>yml 文件</p><p>yml 文件以key: value方式来指定配置信息<br>多个配置信息以换行+缩进的方式来区分docker-compose.yml禁止使用制表符，在使用docker-compose命令时 默认会在当前目录下找docker-compose.yml文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">mysql:</span>                       <span class="comment"># 服务名称</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span>            <span class="comment"># 代表只要docker启动那么这个容器跟着一起启动</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">daocloud.io/library/mysql:5.7.4</span>  <span class="comment"># 指定镜像路径</span></span><br><span class="line"><span class="attr">contatenr_name:</span> <span class="string">mysql</span>      <span class="comment"># 指定容器名称</span></span><br><span class="line"><span class="attr">ports:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>              <span class="comment"># 指定端口 可指定多个</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3307</span><span class="string">:3307</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">    <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>  <span class="comment"># 指定MySql的root用户登陆密码</span></span><br><span class="line">    <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>          <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/mysql_data:/var/lib/mysql</span> <span class="comment">#将容器目录映射到宿主机路径(可多个)</span></span><br><span class="line"><span class="attr">tomcat:</span> </span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span>             <span class="comment"># 代表只要docker启动那么这个容器跟着一起启动</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span>    <span class="comment"># 指定镜像路径</span></span><br><span class="line"><span class="attr">contatenr_name:</span> <span class="string">tomcat</span>      <span class="comment"># 指定容器名称</span></span><br><span class="line"><span class="attr">ports:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">    <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>          <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/docker_mysql_tomcat/tomcat_logs:/usr/local/tomcat/logs</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml启动管理容器</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># -d：后台运行</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭并删除容器</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启|关闭|重启已经存在的由docker-compose维护的容器</span></span><br><span class="line">docker-compose start|stop|restart</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看docker-compose管理的容器</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker-compose logs -f </span><br></pre></td></tr></table></figure><h3 id="docker-compose配置Dockerfile使用"><a href="#docker-compose配置Dockerfile使用" class="headerlink" title="docker-compose配置Dockerfile使用"></a>docker-compose配置Dockerfile使用</h3><blockquote><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由</p><p>Docker-compose去管理容器</p></blockquote><p><a href="">docker-compose.yml文件</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">ssm:</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">build:</span>            <span class="comment"># 构建自定义镜像</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">../</span>    <span class="comment"># 指定Dockerfile文件路径</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span>  <span class="comment"># 指定Dockerfile文件名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ssm:1.0.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ssm</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><p><a href="">Dockerfile文件</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from daocloud.io&#x2F;library&#x2F;tomcat:8.5.15-jre8</span><br><span class="line">copy test.txt &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;&#x2F;webapps</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以直接启动基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 如果自定义镜像不存在 会帮助我们构建，如果已经存在则会直接运行这个自定义镜像</span></span><br><span class="line"><span class="comment"># 重新构建自定义镜像</span></span><br><span class="line">docker-compose build</span><br><span class="line"><span class="comment"># 运行前重新构建</span></span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Docker中央仓库&quot;&gt;&lt;a href=&quot;#Docker中央仓库&quot; class=&quot;headerlink&quot; title=&quot;Docker中央仓库&quot;&gt;&lt;/a&gt;Docker中央仓库&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.Docker 官方的中央仓库 下载速度慢 &lt;a</summary>
      
    
    
    
    
    <category term="docker" scheme="http://www.fixblog.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的基本操作</title>
    <link href="http://www.fixblog.cn/2019/01/03/nginx-basic/"/>
    <id>http://www.fixblog.cn/2019/01/03/nginx-basic/</id>
    <published>2019-01-03T09:40:11.000Z</published>
    <updated>2021-02-24T06:45:53.317Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><blockquote><p>稳定性强，7*24小时不间断运行</p><p>Nginx提供了非常丰富的配置实例</p><p>占用内存小，并发能力强</p></blockquote><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p><a href="">docker-compose.yml文件</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">nginx:</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/nginx:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_nginx/conf.d/:/etc/nginx/conf.d</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行拉取镜像</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># 以上统称为全局块 worker_processes数值越大并发越强</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># events块</span><br><span class="line"># worker_connections他的数值越大并发越强</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types; #大量的媒体类型</span><br><span class="line">    default_type  application/octet-stream; # 默认响应的类型</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h3><blockquote><p>正向代理：</p><ul><li>正向代理服务时由客户端设立的</li><li>客户端了解代理服务器和目标服务器都是谁</li><li>帮助实现突破访问权限，提高访问速度对目标服务器隐藏客户端的IP地址。</li></ul></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/nginx-server.png" alt="alatar"></p><hr><blockquote><p>反向代理：</p><ul><li>反向代理服务器是配置在服务端的。</li><li>客户端不知道到底访问的是哪一台服务器。</li><li>反向代理可以达到负载均衡，并且可以隐藏服务器真正的IP地址。</li></ul></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/nginx-agent.png" alt="alatar"></p><hr><blockquote><p>Nginx 配置反向代理：</p><ul><li>准备一个目标服务器</li><li>修改nginx配置文件，通过nginx访问到目标服务器</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">   listen 8000;</span><br><span class="line">   server_name localhost;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 基于反向代理访问</span></span><br><span class="line">   location / &#123;</span><br><span class="line">      proxy_pass http://www.fixblog.cn;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">#location / &#123;</span></span><br><span class="line">   <span class="comment">#   root /usr/share/nginx/html;</span></span><br><span class="line">   <span class="comment">#   index index.html index.htm;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>Nginx的location路径映射</p><p>​    优先级关系：</p><p>​        (location=) &gt; (location /xxx/yyy/zzz) &gt; (location ^~)&gt;(location ~, ~*) &gt; (location /起始路径)&gt;(location /)</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># =匹配</span><br><span class="line">location = / &#123;</span><br><span class="line">   # 精确匹配,主机名后面不能带任何的字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 通用匹配</span><br><span class="line">location /xxx &#123;</span><br><span class="line">   # 匹配所有以/xxx开头的路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 正则匹配</span><br><span class="line">location ~ /xxx &#123;</span><br><span class="line">   # 匹配所有以/xxx开头的路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配开头路径</span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">   # 匹配所有以/images开头的路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配结尾</span><br><span class="line">~* \.(gif|jpg|png)$ &#123;</span><br><span class="line">   # 匹配以gif|jpg|png为结尾的路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx负载均衡"><a href="#Nginx负载均衡" class="headerlink" title="Nginx负载均衡"></a>Nginx负载均衡</h3><blockquote><p>Nginx默认提供了三种负载均衡策略：</p><ul><li><p>轮询：</p><ul><li>将客户端发起的请求，平均的分配给每一台服务器。</li></ul></li><li><p>权重：</p><ul><li>会将客户端的请求，根据服务器的权重值不同，分配不同的数量。</li></ul></li><li><p>IP_HASH：</p><ul><li>只要发起请求的客户端的IP地址不变，他始终会将请求发送到指定的服务器上。</li></ul></li></ul></blockquote><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 轮询方式配置负载均衡</span><br><span class="line"></span><br><span class="line">upstream my-server &#123; # server外部配置 upstream</span><br><span class="line">  server ip:port;</span><br><span class="line">  server ip:port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name localhost;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">      proxy_pass http://my-server/;</span><br><span class="line">   &#125;</span><br><span class="line">   #location / &#123;</span><br><span class="line">   #   root /usr/share/nginx/html;</span><br><span class="line">   #   index index.html index.htm;</span><br><span class="line">   #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 权重方式配置负载均衡</span><br><span class="line">upstream my-server &#123;</span><br><span class="line">  server ip:port weight=10;  # 使用weight 配置请求的权重值</span><br><span class="line">  server ip:port weight=2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">   listen 8000;</span><br><span class="line">   server_name localhost;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">      proxy_pass http://my-server/;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   #location / &#123;</span><br><span class="line">   #   root /usr/share/nginx/html;</span><br><span class="line">   #   index index.html index.htm;</span><br><span class="line">   #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># IP_HASH方式配置负载均衡</span><br><span class="line">upstream my-server &#123;</span><br><span class="line">  ip_hash;# 配置ip_hash参数即可</span><br><span class="line">  server ip:port;</span><br><span class="line">  server ip:port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">   listen 8000;</span><br><span class="line">   server_name localhost;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">      proxy_pass http://my-server/;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   #location / &#123;</span><br><span class="line">   #   root /usr/share/nginx/html;</span><br><span class="line">   #   index index.html index.htm;</span><br><span class="line">   #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Nginx动静分离"><a href="#Nginx动静分离" class="headerlink" title="Nginx动静分离"></a>Nginx动静分离</h3><blockquote><p>Nginx的并发能力公式：</p><p>​    worker_processes * worker_connections / 4 | 2 = Nginx最终的并发能力</p><p>​    动态资源乘以4 静态资源乘以2</p><p>Nginx通过动静分离来提升Nginx的并发能力更快的响应</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 动态资源代理</span><br><span class="line">location / &#123;</span><br><span class="line">   proxy_pass 路径;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 静态资源代理</span><br><span class="line">location / &#123;</span><br><span class="line">  root 静态资源路径;</span><br><span class="line">  index 默认访问路径下的什么资源;</span><br><span class="line">  autoindex on; # 代表展示静态资源的全部内容 以列表的形式展开</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Nginx集群"><a href="#Nginx集群" class="headerlink" title="Nginx集群"></a>Nginx集群</h3><blockquote><ul><li>单点故障 避免nginx宕机导致整个程序的崩溃。</li><li>准备多台Nginx 和keepalived(监听Nginx的健康情况)。</li><li>准备haproxy 提供一个虚拟的路径，统一去接收用户请求。</li></ul></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/nginx-cluster.png" alt="avatar"></p><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile 文件</span></span><br><span class="line">FROM nginx:1.13.5-alpine         <span class="comment"># 镜像</span></span><br><span class="line"></span><br><span class="line">RUN apk update &amp;&amp; apk upgrade    <span class="comment"># 更新 下载upgrade 相当于centos yum操作</span></span><br><span class="line"></span><br><span class="line">RUN apk add --no-cache bash curl ipvsadm iproute2 openrc keepalived  <span class="comment"># 下载</span></span><br><span class="line"></span><br><span class="line">COPY entrypoint.sh /entrypoint.sh  <span class="comment"># 复制脚本</span></span><br><span class="line"></span><br><span class="line">RUN chmod +x /entrypoint.sh        <span class="comment"># 给权限</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/entrypoint.sh&quot;</span>]             <span class="comment"># 启动时运行脚本</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># entrypoint.sh</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#/usr/sbin/keepalived -n -l -D -f /etc/keepalived/keepalived.conf --dont-fork --log-console &amp;</span></span><br><span class="line">/usr/sbin/keepalived -D -f /etc/keepalived/keepalived.conf  <span class="comment"># 启动 keepalived 指定配置文件</span></span><br><span class="line"></span><br><span class="line">nginx -g <span class="string">&quot;daemon off;&quot;</span>   <span class="comment"># 启动nginx</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line">version: <span class="string">&quot;3.1&quot;</span></span><br><span class="line">services:</span><br><span class="line">  nginx_master:</span><br><span class="line">    build:</span><br><span class="line">      context: ./</span><br><span class="line">      dockerfile: ./Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - 8081:80</span><br><span class="line">    volumes:</span><br><span class="line">      - ./index-master.html:/usr/share/nginx/html/index.html</span><br><span class="line">      - ./favicon.ico:/usr/share/nginx/html/favicon.ico</span><br><span class="line">      - ./keepalived-master.conf:/etc/keepalived/keepalived.conf</span><br><span class="line">    networks:</span><br><span class="line">      static-network:</span><br><span class="line">        ipv4_address: 49.233.173.199  <span class="comment"># docker 容器的占用的ip</span></span><br><span class="line">    cap_add:           <span class="comment"># 添加一些权限</span></span><br><span class="line">      - NET_ADMIN</span><br><span class="line">  nginx_slave:</span><br><span class="line">    build:</span><br><span class="line">      context: ./</span><br><span class="line">      dockerfile: ./Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - 8082:80</span><br><span class="line">    volumes:</span><br><span class="line">      - ./index-slave.html:/usr/share/nginx/html/index.html</span><br><span class="line">      - ./favicon.ico:/usr/share/nginx/html/favicon.ico</span><br><span class="line">      - ./keepalived-slave.conf:/etc/keepalived/keepalived.conf</span><br><span class="line">    networks:</span><br><span class="line">      static-network:</span><br><span class="line">        static-network:</span><br><span class="line">        ipv4_address: 49.233.173.199  <span class="comment"># docker 容器的占用的ip</span></span><br><span class="line">    cap_add:           <span class="comment"># 添加一些权限</span></span><br><span class="line">      - NET_ADMIN</span><br><span class="line">  proxy:</span><br><span class="line">    image: haproxy:1.7-alpine</span><br><span class="line">    ports:</span><br><span class="line">      - 6301:6301</span><br><span class="line">    volumes:</span><br><span class="line">      - ./haproxy.cfg:/usr/<span class="built_in">local</span>/etc/haproxy/haproxy.cfg</span><br><span class="line">    networks:</span><br><span class="line">      - static-network</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  static-network:</span><br><span class="line">    ipam:</span><br><span class="line">      config:</span><br><span class="line">        - subnet: 49.233.173.199/16</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># haproxy.cfg</span></span><br><span class="line">global</span><br><span class="line">    <span class="built_in">log</span> 127.0.0.1 local0</span><br><span class="line">    maxconn 4096</span><br><span class="line">    daemon</span><br><span class="line">    nbproc 4</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    <span class="built_in">log</span> 127.0.0.1 local3</span><br><span class="line">    mode http</span><br><span class="line">    option dontlognull</span><br><span class="line">    option redispatch</span><br><span class="line">    retries 2</span><br><span class="line">    maxconn 2000</span><br><span class="line">    balance roundrobin</span><br><span class="line">    timeout connect 5000ms</span><br><span class="line">    timeout client 5000ms</span><br><span class="line">    timeout server 5000ms</span><br><span class="line"></span><br><span class="line">frontend main</span><br><span class="line">    <span class="built_in">bind</span> *:6301</span><br><span class="line">    default_backend webserver</span><br><span class="line"></span><br><span class="line">backend webserver</span><br><span class="line">    server nginx_master 49.233.173.199:6301 check inter 2000 rise 2 fall 5</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># keepalived-master.conf</span></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script <span class="string">&quot;pidof nginx&quot;</span></span><br><span class="line">    interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface eth0       <span class="comment">#容器内部的网卡名称</span></span><br><span class="line">    virtual_router_id 33</span><br><span class="line">    priority 200         <span class="comment"># 优先级</span></span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass letmein</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        49.233.173.199      <span class="comment"># 虚拟路径</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># keepalived-slave.conf</span></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script <span class="string">&quot;pidof nginx&quot;</span></span><br><span class="line">    interval 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface eth0       <span class="comment">#容器内部的网卡名称</span></span><br><span class="line">    virtual_router_id 33</span><br><span class="line">    priority 100         <span class="comment"># 优先级</span></span><br><span class="line">    advert_int 1</span><br><span class="line"></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass letmein</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        49.233.173.199      <span class="comment"># 虚拟路径</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    track_script &#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;稳定性强，7*24小时不间断运行&lt;/p&gt;
&lt;p&gt;Nginx提供了非常丰富的配置实例&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="nginx" scheme="http://www.fixblog.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Centos下安装配置Redis</title>
    <link href="http://www.fixblog.cn/2018/05/04/centos-redis/"/>
    <id>http://www.fixblog.cn/2018/05/04/centos-redis/</id>
    <published>2018-05-04T15:01:35.000Z</published>
    <updated>2021-02-23T10:09:37.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bo local]# wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.9.tar.gz  # 改变版本选择相应版本</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@bo local]# tar -zxvf redis-4.0.9.tar.gz # 解压</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@bo local]# cd &#x2F;usr&#x2F;local&#x2F;redis-4.0.9 # 进入解压的目录</span><br><span class="line">[root@bo local]# make MALLOC&#x3D;libc # 编译安装</span><br><span class="line">[root@bo local]# cd &#x2F;src &amp;&amp; make install # 将src目录下的文件添加到&#x2F;usr&#x2F;local&#x2F;bin目录下</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bo local]# cd &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;src</span><br><span class="line">[root@bo local]# .&#x2F;redis-server # 启动redis</span><br></pre></td></tr></table></figure><blockquote><p>后台运行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bo local]# vim &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;redis.conf</span><br><span class="line">将 daemonize no 配置项修改为 daemonize yes  redis后台运行</span><br></pre></td></tr></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在&#x2F;etc&#x2F;目录下创建redis目录</span><br><span class="line">[root@bo local]# mkdir &#x2F;etc&#x2F;redis</span><br><span class="line">将redis.conf配置文件复制一份到&#x2F;etc&#x2F;redis目录下并改名为6379.conf</span><br><span class="line">[root@bo local]# cp &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;redis.conf &#x2F;etc&#x2F;redis&#x2F;6379.conf</span><br></pre></td></tr></table></figure><blockquote><p>启动脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将redis的启动将本复制到系统init.d目录下</span><br><span class="line">[root@bo local]# cp &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;utils&#x2F;redis_init_script &#x2F;etc&#x2F;init.d&#x2F;redisd</span><br></pre></td></tr></table></figure><blockquote><p>配置开机自启动</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@bo local]# cd &#x2F;etc&#x2F;init.d</span><br><span class="line">[root@bo local]# chkconfig redisd on # 执行自启命令</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis 启动 service redisd start</span><br><span class="line">redis 关闭 service redisd stop</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jetbrains激活教程</title>
    <link href="http://www.fixblog.cn/2017/04/24/jetbrains-agent/"/>
    <id>http://www.fixblog.cn/2017/04/24/jetbrains-agent/</id>
    <published>2017-04-24T04:57:00.000Z</published>
    <updated>2021-02-23T08:29:54.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此教程来源于网络只用作个人学习和分享，勿用于商业谋利</p></blockquote><h4 id="资源获取"><a href="#资源获取" class="headerlink" title="资源获取"></a>资源获取</h4><p>本激活方法需使用jar包以及专用激活码，获取方法见下文。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>从<a href="https://www.jetbrains.com/">官网</a>下载对应的IDE安装完成后打开点击**<code>Evaluate for free</code>** 免费使用，随意创建一个空的项目使之进入到IDE的工作页面在此点击IDE菜单栏中的<code>Help - Edit Custom VM Option...</code> 打开此文件， 将<code>jetbrains-agent.jar</code>文件放到IDE安装目录的<code>bin</code>目录下并在此文件中配置</p><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/edit786chds78cgdcs33w.jpeg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:&#x2F;Applications&#x2F;GoLand.app&#x2F;Contents&#x2F;bin&#x2F;jetbrains-agent.jar # 填写自己的路径</span><br></pre></td></tr></table></figure><blockquote><p>修改完配置文件后重启IDE！</p></blockquote><h4 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h4><blockquote><p>重启IDE后，点击菜单栏中的<code>Help Register...</code>进行激活</p></blockquote><ul><li><p><code>License server</code> 方式激活</p><p>  地址填写 : <code>http://jetbrains-license-server</code> 或点击<code>Discover Server</code>来填充地址激活</p></li><li><p><code>Activation code</code> 方式激活</p><p>  直接复制激活码激活(激活码见下文)</p></li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><blockquote><p>完成激活后点击<code>Help About</code> 可查看IDE版本号，有效期等信息</p></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/271581140145_.pic_hd.jpeg" alt="avatar"></p><h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><ul><li>Jar 包：<a href="https://pan.baidu.com/s/1OqGii9hrpXDaHKEKKoIPsA">网盘连接</a>  <code>密码:ssnz</code></li><li>License server地址：<code>http://jetbrains-license-server</code></li><li>激活码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">520E5894E2-eyJsaWNlbnNlSWQiOiI1MjBFNTg5NEUyIiwibGljZW5zZWVOYW1lIjoicGlnNiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-DZ&#x2F;oNHBfyho0XrrCJJvAOKg5Q1tLBgOdbCmzCKwkuM+Yryce0RoOi3OOmH6Ba&#x2F;uTcCh&#x2F;L37meyD0FJdJIprv59y4+n+k2kIeF&#x2F;XKrKqg0dEsDUQRw0lUqqMt99ohqa+zmbJ44Yufdwwx&#x2F;F1CtoRGvEQ2Mn0QjuqRoZJZ3wiT5Am22JiJW8MaNUl3wg9YPj+OPGARKKJUdUJ0NGUDQBcBAv5ds8LhbSbJSbPkbkwH&#x2F;a1QMz4nEdn6lRDKI1aFIn43QhBSCFqvUq6TPJlbIJ0ZjE+PyZjHFBKCgkry0DHPXU2BbtIZPsksQnN3fx240a9K6sN7peZnLpEoMoq23FEz4g&#x3D;&#x3D;-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG&#x2F;PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg&#x2F;nYV31HLF7fJUAplI&#x2F;1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl&#x2F;GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4&#x2F;G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd&#x2F;GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt&#x2F;wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59&#x2F;THOT7NJQhr6AyLkhhJCdkzE2cob&#x2F;KouVp4ivV7Q3Fc6HX7eepHAAF&#x2F;DpxwgOrg9smX6coXLgfp0b1RU2u&#x2F;tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB&#x2F;40BjpMUrDRCeKuiBahC0DCoU&#x2F;4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV&#x2F;g&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><hr><p>此方法对 **<code>jetbrains</code>**系列产品有效</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;此教程来源于网络只用作个人学习和分享，勿用于商业谋利&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;资源获取&quot;&gt;&lt;a href=&quot;#资源获取&quot; class=&quot;headerlink&quot; title=&quot;资源获取&quot;&gt;&lt;/a&gt;资源获取&lt;/h4&gt;&lt;p&gt;本</summary>
      
    
    
    
    
    <category term="php" scheme="http://www.fixblog.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>mysql事物</title>
    <link href="http://www.fixblog.cn/2017/04/12/mysql-transaction/"/>
    <id>http://www.fixblog.cn/2017/04/12/mysql-transaction/</id>
    <published>2017-04-12T03:17:13.000Z</published>
    <updated>2021-02-23T08:30:16.717Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/41e91782ca004ac59823bebb6d5a3a18.jpeg" alt="avatar"></p><h3 id="MySql版本链"><a href="#MySql版本链" class="headerlink" title="MySql版本链"></a>MySql版本链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于使用InnoDB存储引擎的表来说它的聚簇索引记录中都包含两个必要的隐藏列(row_id并不是必要的，我们创建的表中有主键或者非NULL唯一建时都不会包含row_id列)</span><br></pre></td></tr></table></figure><ul><li><strong>trx_id:每次对某条记录进行改变时，都会把对应的事物ID赋值给trx_id隐藏列</strong></li><li><strong>roll_pointer:每次对某条记录进行改变时，这个隐藏列会存一个指针，可以通过这个指针找到该记录修改前的信息</strong></li></ul><h3 id="MySql-ReadView"><a href="#MySql-ReadView" class="headerlink" title="MySql ReadView"></a><strong>MySql ReadView</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于使用READ UNCOMMITTED  隔离级别的事物来说直接读取记录的最新版本就好了,对于使用SERIALIZABLE 隔离级别的事物来说使用加锁的方式来访问记录，对于使用READ COMMITTEDD和REPEATABLE READ 隔离级别的事物来说就需要用到版本链了，核心问题就是需要判断以下版本链中的那个版本是当前事物中可见的。</span><br></pre></td></tr></table></figure><ul><li><p><strong>m_ids：表示在生成ReadView时当前系统中活跃的(没有提交的)读写事物的事物ID列表</strong></p></li><li><p><strong>min_trx_id：表示在生成ReadView时当前系统中活跃的读写事物中最小的事物ID也就是m_ids中的最小值</strong></p></li><li><p><strong>max_trx_id：表示在生成ReadView时系统中应该分配给写一个事物ID的值</strong></p></li><li><p><strong>creator_trx_id：表示生成该ReadView的事物ID</strong></p><h3 id="MySql-隔离级别"><a href="#MySql-隔离级别" class="headerlink" title="MySql 隔离级别"></a><strong>MySql 隔离级别</strong></h3></li><li><p>查看当前会话的隔离级别</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@tx_isolation; Mysql8 改为 transaction_isolation参数</span><br></pre></td></tr></table></figure><ul><li>查看系统当前隔离级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@global.tx_isolation;</span><br></pre></td></tr></table></figure><ul><li>设置当前会话隔离级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySql8以下 set session transaction isolatin level repeatable read;</span><br></pre></td></tr></table></figure><ul><li>设置系统当前隔离级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level repeatable read;</span><br></pre></td></tr></table></figure><h3 id="关于隔离级别的理解"><a href="#关于隔离级别的理解" class="headerlink" title="关于隔离级别的理解"></a><strong>关于隔离级别的理解</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read uncommitted  读未提交</span><br><span class="line">一个事物可以读到其他事物还未提交的数据，例如:SESSION_A的操作还未提交但是SESSION_B就可以看到SESSION_A操作的结果 这种现象为(脏读)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">read committed 读提交 不可重复读</span><br><span class="line">一个事物只能读到另一个已经提交的事物修改过的数据,可能多次读取的数据结果不一致</span><br><span class="line">如果一个事物先根据某些条件查询出一些记录，之后另一个事物又向表中写入了符合这些条件的记录,原来的事物再次按照该条件查询时能把另一个事物写入的记录也读出来(幻读)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repeatable read 可重复读</span><br><span class="line">SESSION_A第一次读过某条记录后即使SESSION_B修改了该记录的值并提交SESSION_A之后再去读这条记录时读到的任然是第一次读到的值这种隔离级别解决了不可重复但还是会出现幻读。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">serializable 串行化</span><br><span class="line">串行化不允许读-写，写-读的并发操作，这种隔离级别对同一条记录的操作是串行的，所以不会出现脏读，幻读等现象。</span><br><span class="line">例如：SESSION_A要读 SESSION_B要写 而SESSION_B只有等SESSION_A事物完成并提交后才能对当前记录的操作，中间会有阻塞的现象。</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>READ UNCOMMITTED 隔离级别下，可能发生<code>脏读</code> ，<code>不可重复读</code>，<code>幻读</code>的问题。</li><li>READ COMMITTED    隔离级别下，可能发生<code>不可重复读</code>和<code>幻读</code>的问题，但不会发生<code>脏读</code>的问题</li><li>REPEATABLE READ    隔离级别下，可能发生<code>幻读</code>，不会发生<code>脏读</code>和<code>不可重复读</code>的问题。</li><li>SERIALIZABLE        隔离级别下，各种问题都不可以发生。</li></ul><p><font color=#A52A2A>注意</font>：这四种隔离级别是SQL的标准定义，不同的数据库会有不同的实现，特别需要注意的是 <code>MySql在REPEATABLE READ隔离级别下是可以禁止幻读问题的发生</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/41e91782ca004ac59823bebb6d5a3a18.jpeg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;MyS</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Centos7下安装MySql8</title>
    <link href="http://www.fixblog.cn/2017/04/05/centos-mysql/"/>
    <id>http://www.fixblog.cn/2017/04/05/centos-mysql/</id>
    <published>2017-04-05T08:58:22.000Z</published>
    <updated>2021-02-23T08:27:30.043Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/753bd4c354ba3f2c3f47fd5dc4a88858.jpeg" alt="avatar"></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>进入<a href="https://dev.mysql.com/downloads/mysql/">官网</a>下载自己合适的MySql8安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql-8.0.15-el7-x86_64.tar.gz 上传至服务器中</span><br><span class="line">解压 tar -zxvf mysql-8.0.15-el7-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将解压后的目录移动到/usr/local/ 并修改目录名为mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-8.0.15-el7-x86_64.tar.gz &#x2F;usr&#x2F;local&#x2F;mysql</span><br></pre></td></tr></table></figure><p>添加mysql 运行用户和组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">添加mysql组 groupadd mysql</span><br><span class="line">添加mysql用户并加入到mysql组中 useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure><p>修改mysql为 mysql 组和mysql用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql &#x2F;usr&#x2F;local&#x2F;mysql</span><br></pre></td></tr></table></figure><p>初始化配置，会产生临时密码需记住用来第一次登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入mysql目录 cd &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">初始化 bin&#x2F;mysqld --initialize --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql -- datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</span><br></pre></td></tr></table></figure><p>查看是否有生成my.cnf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入&#x2F;etc目录 cd &#x2F;etc</span><br><span class="line">ls | grep my.cnf</span><br></pre></td></tr></table></figure><p>如果没有自动生成/etc/my.cnf 则手动创建一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建my.cnf配置文件  touch &#x2F;etc&#x2F;my.cnf</span><br><span class="line">修改权限 chmod 755 &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>编辑my.cnf配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql   # mysql目录</span><br><span class="line">datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data   # mysql数据目录</span><br><span class="line">port&#x3D;3306   # mysql端口</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock  # mysql的套接字</span><br><span class="line">pid-file&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;$hostname.pid   # $hostname为主机名称</span><br><span class="line">sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure><p>配置mysql环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile  # 打开profile文件</span><br><span class="line">export MYSQL_HOME MYSQL_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class="line">export PATH&#x3D;$PATH:$MYSQL_HOME&#x2F;lib:$MYSQL_HOME&#x2F;bin</span><br><span class="line">保存后 source &#x2F;etc&#x2F;profile 让配置生效</span><br></pre></td></tr></table></figure><p>配置mysql开机启动项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysql</span><br><span class="line">加执行权限 chmod +x &#x2F;etc&#x2F;init.d&#x2F;mysql</span><br><span class="line">注册启动服务 chkconfig --add mysql</span><br><span class="line">查看启动服务 chkconfig --list</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动 service mysql start</span><br><span class="line">停止 service mysql stop</span><br><span class="line">重启 service mysql restart</span><br></pre></td></tr></table></figure><p>使用初始化是生成的密码登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">Password: evoeJ%b13d0h</span><br></pre></td></tr></table></figure><p>修改新的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;your_password&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/753bd4c354ba3f2c3f47fd5dc4a88858.jpeg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载&quot;</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://www.fixblog.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>consul配置</title>
    <link href="http://www.fixblog.cn/2017/03/22/consul/"/>
    <id>http://www.fixblog.cn/2017/03/22/consul/</id>
    <published>2017-03-22T07:02:01.000Z</published>
    <updated>2021-02-23T09:55:50.695Z</updated>
    
    <content type="html"><![CDATA[<p>官网 <a href="https://www.consul.io/downloads.html">https://www.consul.io/downloads.html</a></p><p><strong>集群启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">consul agent -server -bootstrap-expect=3 -data-dir=/var/consul -node=node-172.16.4.49 -<span class="built_in">bind</span>=172.16.4.49 -client=0.0.0.0 -datacenter=BeiJing -ui</span><br><span class="line"></span><br><span class="line">consul agent -server -bootstrap-expect=3 -data-dir=/var/consul -node=node-172.16.4.50 -<span class="built_in">bind</span>=172.16.4.50 -client=0.0.0.0 -datacenter=BeiJing -ui</span><br><span class="line"></span><br><span class="line">consul agent -server -bootstrap-expect=3 -data-dir=/var/consul -node=node-172.16.4.53 -<span class="built_in">bind</span>=172.16.4.53 -client=0.0.0.0 -datacenter=BeiJing -ui</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li> server： 以server身份启动。默认是client</li><li> bootstrap-expect：集群要求的最少server数量，当低于这个数量，集群即失效。</li><li> data-dir：data存放的目录，更多信息请参阅consul数据同步机制</li><li> node：节点id，集群中的每个node必须有一个唯一的名称。默认情况下，Consul使用机器的hostname</li><li> bind：监听的ip地址。默认绑定0.0.0.0，可以不指定。表示Consul监听的地址,而且它必须能够被集群中的其他节点访问。Consul默认会监听第一个private IP,但最好还是提供一个。生产设备上的服务器通常有好几个网卡，所以指定一个不会出错</li><li> client: 客户端的ip地址，0.0.0.0是指谁都可以访问（不加这个，下面的ui :8500无法访问）</li><li> ui: 可以访问UI界面</li><li>-config-dir指定配置文件夹，Consul会加载其中的所有文件</li><li>-datacenter 指定数据中心名称，默认是dc1</li></ul><p><strong>组成consul集群</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将另外两台机器加入到172.16.4.49</span></span><br><span class="line">consul join 172.16.4.49</span><br></pre></td></tr></table></figure><p><strong>集群状态</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul operator raft list-peers</span><br></pre></td></tr></table></figure><p><strong>服务注册</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法：PUT</span><br><span class="line">请求：http://127.0.0.1:8500/v1/agent/service/register</span><br><span class="line">参数：application/json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;ID&quot;</span>: <span class="string">&quot;os_snmp-v3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;snmp-v3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Tags&quot;</span>: [<span class="string">&quot;snmp&quot;</span>, <span class="string">&quot;v3&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;Address&quot;</span>: <span class="string">&quot;172.16.2.177&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Port&quot;</span>: <span class="number">8888</span>,</span><br><span class="line">  <span class="attr">&quot;EnableTagOverride&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;Check&quot;</span>: &#123;  <span class="comment">// 健康检查</span></span><br><span class="line">      <span class="attr">&quot;Notes&quot;</span>: <span class="string">&quot;Ensure we don&#x27;t oversubscribe memory&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;DeregisterCriticalServiceAfter&quot;</span>: <span class="string">&quot;服务注销时间秒 如果服务异常时&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Args&quot;</span>: [<span class="string">&quot;指定要运行的命令参数以更新检查状态&quot;</span>],</span><br><span class="line">      <span class="attr">&quot;DockerContainerID&quot;</span>: <span class="string">&quot;指定检查是Docker检查&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;HTTP&quot;</span>: <span class="string">&quot;http检查模式&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Method&quot;</span>: <span class="string">&quot;http检查方式 默认GET&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Header&quot;</span>: &#123; <span class="attr">&quot;Content-Type&quot;</span>: [<span class="string">&quot;指定一组应为HTTP检查设置的标题&quot;</span>] &#125;,</span><br><span class="line">      <span class="attr">&quot;Body&quot;</span>: <span class="string">&quot;&#123;指定应与HTTP支票一起发送的正文。&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;TCP&quot;</span>: <span class="string">&quot;指定TCP以每个值连接TCP&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Interval&quot;</span>: <span class="string">&quot;指定运行此检查的频率&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Timeout&quot;</span>: <span class="string">&quot;在脚本，HTTP，TCP或gRPC检查的情况下，指定传出连接的超时&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;TLSSkipVerify&quot;</span>: <span class="string">&quot;指定是否不验证HTTPS检查的证书。(布尔值)&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官网 &lt;a href=&quot;https://www.consul.io/downloads.html&quot;&gt;https://www.consul.io/downloads.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;集群启动&lt;/strong&gt;&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux搭建GitLab服务器</title>
    <link href="http://www.fixblog.cn/2017/03/22/git-lab/"/>
    <id>http://www.fixblog.cn/2017/03/22/git-lab/</id>
    <published>2017-03-22T07:02:01.000Z</published>
    <updated>2021-02-23T08:29:08.707Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/4608f1efdb2cd3a35f970ddb518835ca.jpg" alt="avatar"></p><h2 id="GitLab简介"><a href="#GitLab简介" class="headerlink" title="GitLab简介"></a>GitLab简介</h2><blockquote><p>GitLab 是利用 Ruby On Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与 GitHub 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序( Wall )进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p></blockquote><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><blockquote><p>官方:<a href="https://about.gitlab.com/downloads/#ubuntu1404">https://about.gitlab.com/downloads/#ubuntu1404</a></p><p>国内镜像:<a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</a></p></blockquote><ul><li><h4 id="安装和配置必要的依赖"><a href="#安装和配置必要的依赖" class="headerlink" title="安装和配置必要的依赖"></a>安装和配置必要的依赖</h4><p>  如果你安装 postfix 发送邮件，如果你不需要邮件发送,可以跳过直接看第二步,请选择“网站设置”中。而不是使用后缀也可以使用道具或配置自定义 SMTP 服务器和它配置为 SMTP 服务器。在 <strong>CentOS 的6和7</strong>，下面的命令将在系统防火墙打开 HTTP 和 SSH 访问。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install curl openssh-server ca-certificates postfix  </span><br></pre></td></tr></table></figure><ul><li><h4 id="切换清华大学镜像"><a href="#切换清华大学镜像" class="headerlink" title="切换清华大学镜像"></a>切换清华大学镜像</h4><p>  首先信任 GitLab 的 GPG 公钥:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;gpg.key 2&gt; &#x2F;dev&#x2F;null | sudo apt-key add - &amp;&gt;&#x2F;dev&#x2F;null </span><br></pre></td></tr></table></figure><p>选择你的 Debian/Ubuntu 版本， 其他版本请跳转<a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/">国内镜像</a>查看/etc/apt/sources.list.d/gitlab-ce.list 这个文件默认不存在 你需要创建并添加下面配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;gitlab-ce.list 加入以下内容</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-ce&#x2F;ubuntu trusty main </span><br></pre></td></tr></table></figure><ul><li><h4 id="添加完成执行更新-并安装gitlab"><a href="#添加完成执行更新-并安装gitlab" class="headerlink" title="添加完成执行更新 并安装gitlab"></a><strong>添加完成执行更新 并安装gitlab</strong></h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure><ul><li>####配置文件和修改域名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line">修改 &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb文件</span><br><span class="line">external_url &#39;你的域名&#39;</span><br></pre></td></tr></table></figure><ul><li>####配置邮箱</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#Sending application email via SMTP</span><br><span class="line">gitlab_rails[&#39;smtp_enable&#39;] &#x3D; true  </span><br><span class="line">gitlab_rails[&#39;smtp_address&#39;] &#x3D; &quot;smtp.163.com&quot;  </span><br><span class="line">gitlab_rails[&#39;smtp_port&#39;] &#x3D; 25  </span><br><span class="line">gitlab_rails[&#39;smtp_user_name&#39;] &#x3D; &quot;xxuser@163.com&quot;  </span><br><span class="line">gitlab_rails[&#39;smtp_password&#39;] &#x3D; &quot;xxpassword&quot;  </span><br><span class="line">gitlab_rails[&#39;smtp_domain&#39;] &#x3D; &quot;163.com&quot;  </span><br><span class="line">gitlab_rails[&#39;smtp_authentication&#39;] &#x3D; :login  </span><br><span class="line">gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] &#x3D; true</span><br><span class="line"></span><br><span class="line">##修改 gitlab 配置的发信人</span><br><span class="line">gitlab_rails[&#39;gitlab_email_from&#39;] &#x3D; &quot;xxuser@163.com&quot;  </span><br><span class="line">user[&quot;git_user_email&quot;] &#x3D; &quot;xxuser@163.com&quot;</span><br></pre></td></tr></table></figure><ul><li><h4 id="如果执行不成功-请检查配置和内存"><a href="#如果执行不成功-请检查配置和内存" class="headerlink" title="如果执行不成功 请检查配置和内存"></a>如果执行不成功 请检查配置和内存</h4></li></ul><p><code>gitlab-ctl reconfigure</code> 重新编译启动</p><p><a href="http://docs.gitlab.com/omnibus/">文档地址</a></p><p>apt-get 安装默认集成了 nginx 如果你需要服务器在跑其他环境,你需要修改你的gitlab nginx 的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line">nginx[&#39;listen_port&#39;] &#x3D; 8080</span><br></pre></td></tr></table></figure><p>可使用 <code>gitlab-ctl help</code> 查看更多命令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;//fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/4608f1efdb2cd3a35f970ddb518835ca.jpg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;GitLab简介&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>phpstorm-速查表</title>
    <link href="http://www.fixblog.cn/2017/03/17/phpstorm-quick-check-list/"/>
    <id>http://www.fixblog.cn/2017/03/17/phpstorm-quick-check-list/</id>
    <published>2017-03-17T06:40:44.000Z</published>
    <updated>2021-02-23T08:30:53.864Z</updated>
    
    <content type="html"><![CDATA[<p><img src="//fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/9909ead7fd56eb8343500bfed06c0404.jpeg" alt="avatar"></p><h2 id="Mac基本按键说明"><a href="#Mac基本按键说明" class="headerlink" title="Mac基本按键说明"></a>Mac基本按键说明</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">⌘——Command</span><br><span class="line">⌃ ——Control</span><br><span class="line">⌥——Option/Alt</span><br><span class="line">⇧——Shift</span><br><span class="line">⇪——Caps Lock</span><br><span class="line"><span class="function"><span class="keyword">fn</span>——功能键就是<span class="title">fn</span>  </span></span><br></pre></td></tr></table></figure><h2 id="快捷调试"><a href="#快捷调试" class="headerlink" title="快捷调试"></a>快捷调试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Control+alt+R 运行项目  </span><br><span class="line">Command+Control+R 运行Debug  </span><br><span class="line">Command+F8 添加断点  </span><br><span class="line">Command+shift+F8 打开断点列表</span><br></pre></td></tr></table></figure><h2 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Command+alt+T 用 (if..else, try..catch, for, etc.)包住  </span><br><span class="line">Command+&#x2F; 注释&#x2F;取消注释的行注释  </span><br><span class="line">Command+alt+&#x2F; 注释&#x2F;取消注释与块注释  </span><br><span class="line">alt+↑ 向上选取代码块  </span><br><span class="line">alt+↓ 向下选取代码块  </span><br><span class="line">Command+alt+L 格式化代码  </span><br><span class="line">tab,shift+tab 调整缩进  </span><br><span class="line">Control+alt+I 快速调整缩进  </span><br><span class="line">Command+C 复制  </span><br><span class="line">Command+X 剪切  </span><br><span class="line">Command+V 粘贴  </span><br><span class="line">Command+shift+V 从剪贴板里选择粘贴  </span><br><span class="line">Command+D 复制代码副本  </span><br><span class="line">Command+delete 删除当前行  </span><br><span class="line">Control+Shift+J 清除缩进变成单行  </span><br><span class="line">shift+回车 快速换行  </span><br><span class="line">Command+回车 换行光标还在原先位置  </span><br><span class="line">Command+shift+U 大小写转换  </span><br><span class="line">Command+shift+[,Command+shift+] 文件选项卡快速切换  </span><br><span class="line">Command+加号,Command+减号 收缩代码块  </span><br><span class="line">Command+shift+加号，Command+shift+减号 收缩整个文档的代码块  </span><br><span class="line">Command+W 关闭当前文件选项卡  </span><br><span class="line">alt+单击 光标在多处定位  </span><br><span class="line">Control+shift+J 把下面行的缩进收上来  </span><br><span class="line">shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等  </span><br><span class="line">alt+&#x2F; 代码补全</span><br></pre></td></tr></table></figure><h2 id="定点导航"><a href="#定点导航" class="headerlink" title="定点导航"></a>定点导航</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Command+O 跳转到某个类  </span><br><span class="line">Command+shift+O 跳转到某个文件  </span><br><span class="line">Command+alt+O 跳转到某个符号  </span><br><span class="line">Control+←,Control+→ 转到上&#x2F;下一个编辑器选项卡  </span><br><span class="line">F12 打开之前打开的工具窗口（TODO、终端等）  </span><br><span class="line">Command+L 跳转行  </span><br><span class="line">Command+E 弹出最近文件  </span><br><span class="line">Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处）  </span><br><span class="line">Command+shift+delete 导航到上一个编辑位置的位置  </span><br><span class="line">Command+B 跳转到变量声明处  </span><br><span class="line">Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释）  </span><br><span class="line">Command+Y 小浮窗显示变量声明时的行  </span><br><span class="line">Command+[,Command+] 光标现在的位置和之前的位置切换  </span><br><span class="line">Command+F12 文件结构弹出式菜单  </span><br><span class="line">alt+H 类的层次结构  </span><br><span class="line">F2,shift+F2 切换到上\下一个突出错误的位置  </span><br><span class="line">Command+↑ 跳转到导航栏  </span><br><span class="line">F3 添加书签  </span><br><span class="line">alt+F3 添加带助记的书签  </span><br><span class="line">alt+1,alt+2… 切换到相应助记的书签位置  </span><br><span class="line">Command+F3 打开书签列表 </span><br></pre></td></tr></table></figure><h2 id="VCS-本地历史记录"><a href="#VCS-本地历史记录" class="headerlink" title="VCS/本地历史记录"></a>VCS/本地历史记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">control+V 打开VST小浮窗  </span><br><span class="line">Command+K 提交项目  </span><br><span class="line">Command+T 更新项目  </span><br><span class="line">alt+shift+C 打开最近修改列表</span><br></pre></td></tr></table></figure><h2 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Command+F 搜索  </span><br><span class="line">Command+R 替换  </span><br><span class="line">Command+G 查找下一个  </span><br><span class="line">Command+shift+G 查找下一个  </span><br><span class="line">Command+shift+F 按路径搜索  </span><br><span class="line">Command+shift+R 按路径替换</span><br></pre></td></tr></table></figure><h2 id="选中文字的搜索"><a href="#选中文字的搜索" class="headerlink" title="选中文字的搜索"></a>选中文字的搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Command+F7 向声明的地方搜索并选中  </span><br><span class="line">Command+shift+F7 打开搜索框进行搜索  </span><br><span class="line">Command+alt+F7 打开小浮窗显示搜索列表</span><br></pre></td></tr></table></figure><h2 id="对项目文件的操作"><a href="#对项目文件的操作" class="headerlink" title="对项目文件的操作"></a>对项目文件的操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F5 复制文件到某个目录  </span><br><span class="line">F6 移动文件到某个目录  </span><br><span class="line">Command+delete 安全删除  </span><br><span class="line">shift+F6 重命名 </span><br></pre></td></tr></table></figure><h2 id="全局快捷键"><a href="#全局快捷键" class="headerlink" title="全局快捷键"></a>全局快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">双击shift 弹出小浮窗搜索所有</span><br><span class="line">Command+~切换项目 Command+shift+~ 反向切换项目 (在打开的不同项目中切换)  </span><br><span class="line">Command+shift+A 整个工程的查找操作  </span><br><span class="line">Command+1,Command+2… 打开各种工具窗口  </span><br><span class="line">alt+shift+F 把文件添加到收藏夹  </span><br><span class="line">alt+shift+I 打开项目描述  </span><br><span class="line">alt+~ 快速切换当前计划  </span><br><span class="line">Command+, 设置编辑器  </span><br><span class="line">Control+Tab 选项卡和工具窗口之间进行切换  </span><br><span class="line">alert+回车 显示npm版本升级列表</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;//fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/9909ead7fd56eb8343500bfed06c0404.jpeg&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Mac基本按键说</summary>
      
    
    
    
    
    <category term="php" scheme="http://www.fixblog.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>记录Hexo博客的搭建</title>
    <link href="http://www.fixblog.cn/2017/02/03/centos-hexo/"/>
    <id>http://www.fixblog.cn/2017/02/03/centos-hexo/</id>
    <published>2017-02-03T07:42:07.000Z</published>
    <updated>2021-02-23T08:27:10.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/v2-f9654b817205f6af3e472af284ecc2b2_1200x500.jpeg" alt="avatar"></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>记录在Centos系统上搭建Hexo博客框架,实现简单的个人博客。(本次记录客户端以Mac os为例,服务端以阿里云ECS为例)</p><h3 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h3><blockquote><p><a href="https://hexo.io/zh-cn/docs/index.html">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo使用<code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo使用<code>Node.js</code>来渲染页面，因此渲染速度极快。只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。同时，Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></blockquote><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li><a href="https://git-scm.com/download/mac">Git For Mac</a></li><li><a href="https://git-scm.com/download/win">Git For Win</a></li><li><a href="https://npm.taobao.org/mirrors/node/v12.14.1/node-v12.14.1.pkg">Nodejs For Mac</a></li><li><a href="https://npm.taobao.org/mirrors/node/v12.14.1/node-v12.14.1-x64.msi">Nodejs For Win</a></li><li><a href="http://nginx.org/">Nginx 下载对应版本</a></li></ul><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><hr><h4 id="安装Git及配置"><a href="#安装Git及配置" class="headerlink" title="安装Git及配置"></a>安装Git及配置</h4><blockquote><p>Mac下直接下载后缀为<code>.pkg</code>的Git文件进行傻瓜式安装即可,安装完成后可查看版本确认</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ git version</span><br><span class="line">author$ git version 2.15.0</span><br></pre></td></tr></table></figure><blockquote><p>配置用户名及邮箱</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ git config --global user.name &quot;用户名&quot;</span><br><span class="line">author$ git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><blockquote><p>确认是否生成<code>SSH Key</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author$ ls ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/8yfvd8svch7vcdhvf.jpeg" alt="avatar"></p><blockquote><p>如果没有<code>SSH Key</code> 则创建一个</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author$ ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><h4 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><blockquote><p>下载后缀为<code>.pkg</code>的Nodejs安装文件进行安装即可，安装完成后可查看<code>node</code>和<code>npm</code>版本确认</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ node -v</span><br><span class="line">v12.14.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ npm -v</span><br><span class="line">6.13.4</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/chdsu9ascas7csd8.jpeg" alt="avatar"></p><h3 id="安装Hexo框架"><a href="#安装Hexo框架" class="headerlink" title="安装Hexo框架"></a>安装Hexo框架</h3><blockquote><p>直接通过npm来全局安装Hexo框架</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/7uchdu0asudh768dcsu.jpeg" alt="avatar"></p><blockquote><p>漫长的等待完成Hexo框架安装之后再进行初始化，选择一个目录来存放博客文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ cd fixblog</span><br><span class="line">author$ hexo init blog   #初始化</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/87yncdyuc78h23d8c.jpeg" alt="avatar"></p><blockquote><p>初始化完成以后打开blog目录下的<code>package.json</code>文件，在dependencies的配置项中追加Git选项，然后使用npm进行包的安装。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ cd blog</span><br><span class="line">author$ vi package.json</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/66tycgduhcbdsuh9.jpeg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author$ npm install</span><br></pre></td></tr></table></figure><blockquote><p>包安装完成以后可直接启动博客然后在浏览器通过<code>localhost:4000</code>进行访问Hexo博客默认页面了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ cd blog</span><br><span class="line">author$ hexo s</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/40c7dschdbc986ycd9s.jpeg" alt="avatar"></p><p>至此在客户端的Hexo框架安装及相关配置就完成了</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><hr><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><blockquote><p>Centos下安装使用yum安装或者到官网下载源码安装即可安装完成后通过IP访问出现以下页面表示安装成功</p></blockquote><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/55ycghugd67uygichds.jpeg" alt="avatar"></p><blockquote><p>在Nginx安装目录下的vhost目录下新建后缀为<code>.conf</code>的配置文件来配置域名及博客目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhost</span><br><span class="line">author$ touch fixblog.cn.conf</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/57csdycsdc0098du89sc.jpeg" alt="avatar"></p><blockquote><p>在新建的<code>fixblog.cn.conf</code>配置文件中配置以下信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        #listen [::]:80 default_server ipv6only&#x3D;on;</span><br><span class="line">        server_name www.fixblog.cn fixblog.cn;   #域名</span><br><span class="line">        index index.php index.html index.htm;</span><br><span class="line">        root  &#x2F;home&#x2F;wwwroot&#x2F;blog;             #博客目录</span><br><span class="line"></span><br><span class="line">        #error_page   404   &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">        # Deny access to PHP files in specific directory</span><br><span class="line">        #location ~ &#x2F;(wp-content|uploads|wp-includes|images)&#x2F;.*\.php$ &#123; deny all; &#125;</span><br><span class="line"></span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        location &#x2F;nginx_status</span><br><span class="line">        &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log   off;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            if (!-e $request_filename) &#123;</span><br><span class="line">               rewrite ^(.*)$ &#x2F;index.php?s&#x3D;&#x2F;$1 last;</span><br><span class="line">               break;</span><br><span class="line">            &#125;</span><br><span class="line">            #try_files $uri $uri&#x2F; &#x2F;index.php?$query_string;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ &#x2F;.well-known &#123;</span><br><span class="line">            allow all;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ &#x2F;\.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  &#x2F;home&#x2F;wwwlogs&#x2F;access.log;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至此，Nginx的配置基本完成了。</p><h4 id="安装Nodejs-1"><a href="#安装Nodejs-1" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><blockquote><p>Centos下可直接使用<code>yum</code>来安装<code>Nodejs</code>，安装完成后检查<code>nodejs</code>和<code>npm</code>版本信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author$ yum install -y nodejs</span><br><span class="line">author$ node -v</span><br><span class="line">author$ npm -v</span><br></pre></td></tr></table></figure><h4 id="安装Git及配置-1"><a href="#安装Git及配置-1" class="headerlink" title="安装Git及配置"></a>安装Git及配置</h4><blockquote><p>Centos下可直接使用yum来安装Git，安装完成后检查Git版本信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ yum install git</span><br><span class="line">author$git version</span><br></pre></td></tr></table></figure><blockquote><p>创建git用户及密码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ adduser git</span><br><span class="line">author$ passwd git</span><br></pre></td></tr></table></figure><blockquote><p>把git用户添加到<code>sudo</code>用户组当中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author$ vi &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/8ycds8cdschd9182.jpeg" alt="avatar"></p><blockquote><p>切换到git用户并将客户端生成SSH Key的公钥加入到服务器<code>~/.ssh/authorized_keys</code>文件中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ su git</span><br><span class="line">author$ vi ~&#x2F;.ssh&#x2F;authorized_keys   #将客户端的公钥加入到此文件</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/7y12he87dgew8f7.jpeg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys   # 添加权限</span><br><span class="line">author$ chmod 700 ~&#x2F;.ssh</span><br></pre></td></tr></table></figure><blockquote><p>配置完成后返回客户端测试是否可以连接</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author$ ssh -v git@serverIp</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/76ycdw8c7yhwe87cge.jpeg" alt="avatar"></p><blockquote><p>创建Nginx所配置的博客目录 <code>/home/wwwroot/blog</code> 并授予git用户</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author$ sudo mkdir -p &#x2F;home&#x2F;wwwroot&#x2F;blog     # 创建博客目录</span><br><span class="line">author$ sudo chown -R git:git &#x2F;home&#x2F;wwwroot&#x2F;blog</span><br></pre></td></tr></table></figure><blockquote><p>在服务器上初始化一个git裸仓库并创建一个<code>post-receive</code>文件给予执行权限</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">author$ su git     # 切换git用户</span><br><span class="line">author$ cd ~       # 进入当前用户的家目录</span><br><span class="line">author$ git init --bare blog.git</span><br><span class="line">author$ vim ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive    # 新建post-receive文件加入以下内容</span><br><span class="line"></span><br><span class="line">#！&#x2F;bin&#x2F;sh</span><br><span class="line">git --work-tree&#x3D;&#x2F;博客目录路径&#x2F; --git-dir&#x3D;&#x2F;初始化git仓库路径&#x2F; checkout -f</span><br></pre></td></tr></table></figure><p><img src="https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/78fdwtcwcycdw8c87c.jpeg" alt="avatar"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author$ chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive  #赋予执行权限</span><br></pre></td></tr></table></figure><blockquote><p>返回客户端配置博客根目录下的 <code>_config.yml</code>文件，配置Git提交地址。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#39;git&#39;</span><br><span class="line">  repo: git@serverIp:&#x2F;home&#x2F;git&#x2F;fixblog.git   # 服务器初始化的git仓库地址</span><br><span class="line">  branch: master</span><br><span class="line">  message:</span><br></pre></td></tr></table></figure><blockquote><p>保存后使用以下命令测试</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   # 清除hexo博客缓存</span><br><span class="line">hexo g       # 重新生成博客静态文件</span><br><span class="line">hexo d       # 将hexo博客推送到服务器</span><br></pre></td></tr></table></figure><p>以上命令都正常执行后就可通过Nginx中配置的域名访问博客了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://fixblog.oss-cn-shanghai.aliyuncs.com/fixblog/images/v2-f9654b817205f6af3e472af284ecc2b2_1200x500.jpeg&quot; alt=&quot;avatar&quot;&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="linux hexo" scheme="http://www.fixblog.cn/tags/linux-hexo/"/>
    
  </entry>
  
  <entry>
    <title>GIT简介</title>
    <link href="http://www.fixblog.cn/2016/05/21/git/"/>
    <id>http://www.fixblog.cn/2016/05/21/git/</id>
    <published>2016-05-21T06:34:23.000Z</published>
    <updated>2021-02-23T08:31:38.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用GIT在本地创建一个项目"><a href="#使用GIT在本地创建一个项目" class="headerlink" title="使用GIT在本地创建一个项目"></a><font color="#006600">使用GIT在本地创建一个项目</font></h3><blockquote><p><font color="#7ab2fa">$ mkdir ~/hello-world    //创建一个项目hello-world<br>$ cd ~/hello-world       //打开这个项目<br>$ git init             //初始化<br>$ touch README<br>$ git add README        //更新README文件<br>$ git commit -m ‘first commit’     //提交更新，并注释信息“first commit”<br>$ git remote add origin <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x74;&#x65;&#115;&#x74;">&#103;&#105;&#116;&#x40;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x74;&#x65;&#115;&#x74;</a>/hellotest.git     //连接远程github项目<br>$ git push -u origin master     //将本地项目更新到github项目上去</font></p></blockquote><p>git设置关闭自动换行</p><p><font color="#7ab2fa">$ git config –global core.autocrlf false </font></p><p>为了保证文件的换行符是以安全的方法，避免windows与unix的换行符混用的情况，最好也加上这么一句</p><p><font color="#7ab2fa">$ git config –global core.safecrlf true</font></p><h3 id="git-tag-使用"><a href="#git-tag-使用" class="headerlink" title="git tag 使用"></a><font color="#006600">git tag 使用</font></h3><blockquote><p><font color="#7ab2fa">git tag  # 列出当前仓库的所有标签<br>git tag -l ‘v0.1.*’  # 搜索符合当前模式的标签<br>git tag v0.2.1-light  # 创建轻量标签<br>git tag -a v0.2.1 -m ‘0.2.1版本’  # 创建附注标签<br>git checkout [tagname]  # 切换到标签<br>git show v0.2.1  # 查看标签版本信息<br>git tag -d v0.2.1  # 删除标签<br>git tag -a v0.2.1 9fbc3d0  # 补打标签<br>git push origin v0.1.2  # 将v0.1.2标签提交到git服务器<br>git push origin –tags  # 将本地所有标签一次性提交到git服务器<br>git tag  # 查看当前分支下的标签</font></p></blockquote><h3 id="git-pull问题"><a href="#git-pull问题" class="headerlink" title="git pull问题"></a><font color="#006600">git pull问题</font></h3><blockquote><p><font color="#7ab2fa">You asked me to pull without telling me which branch you<br>want to merge with, and ‘branch.content_api_zhangxu.merge’ in<br>your configuration file does not tell me, either. Please<br>specify which branch you want to use on the command line and<br>try again (e.g. ‘git pull <repository> <refspec>‘).<br>See git-pull(1) for details.<br>If you often merge with the same branch, you may want to<br>use something like the following in your configuration file:<br>    [branch “content_api_zhangxu”]<br>    remote = <nickname><br>    merge = <remote-ref><br>    [remote “<nickname>“]<br>    url = <url><br>    fetch = <refspec>See git-config(1) for details.<br>git pull origin new_branch</font></p></blockquote><h3 id="怎样遍历移除项目中的所有-pyc-文件"><a href="#怎样遍历移除项目中的所有-pyc-文件" class="headerlink" title="怎样遍历移除项目中的所有 .pyc 文件"></a><font color="#006600">怎样遍历移除项目中的所有 .pyc 文件</font></h3><blockquote><p><font color="#7ab2fa">sudo find /tmp -name “*.pyc” | xargs rm -rf</font></p></blockquote><p>替换/tmp目录为工作目录</p><blockquote><p><font color="#7ab2fa">git rm *.pyc</font></p></blockquote><h3 id="git变更项目地址"><a href="#git变更项目地址" class="headerlink" title="git变更项目地址"></a><font color="#006600">git变更项目地址</font></h3><blockquote><p><font color="#7ab2fa">git remote set-url origin <a href="mailto:&#x67;&#105;&#116;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#54;&#46;&#x37;&#48;">&#x67;&#105;&#116;&#x40;&#49;&#x39;&#50;&#46;&#x31;&#x36;&#x38;&#x2e;&#54;&#46;&#x37;&#48;</a>:res_dev_group/test.git<br>git remote -v</font></p></blockquote><h3 id="查看某个文件的修改历史"><a href="#查看某个文件的修改历史" class="headerlink" title="查看某个文件的修改历史"></a><font color="#006600">查看某个文件的修改历史</font></h3><blockquote><p><font color="#7ab2fa">git log –pretty=oneline 文件名 # 显示修改历史<br>git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e # 查看更改</font></p></blockquote><h3 id="git-push-时报错-warning-push-default-is-unset"><a href="#git-push-时报错-warning-push-default-is-unset" class="headerlink" title="git push 时报错 warning: push.default is unset"></a><font color="#006600">git push 时报错 warning: push.default is unset</font></h3><p>‘matching’ 参数是 Git 1.x 的默认行为，其意是如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。而 Git 2.x 默认的是 simple，意味着执行 git push 没有指定分支时，只有当前分支会被 push 到你使用 git pull 获取的代码。<br>根据提示，修改git push的行为:</p><blockquote><p><font color="#7ab2fa">git config –global push.default matching </font></p></blockquote><p>再次执行git push 得到解决</p><h3 id="git-submodule的使用拉子项目代码"><a href="#git-submodule的使用拉子项目代码" class="headerlink" title="git submodule的使用拉子项目代码"></a><font color="#006600">git submodule的使用拉子项目代码</font></h3><p>开发过程中，经常会有一些通用的部分希望抽取出来做成一个公共库来提供给别的工程来使用，而公共代码库的版本管理是个麻烦的事情。今天无意中发现了git的git submodule命令，之前的问题迎刃而解了</p><blockquote><p><font color="#7ab2fa">git submodule add 仓库地址 路径</font></p></blockquote><p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。<br>注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone）</p><p>命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。</p><p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行git rm –cached命令将子模块所在的文件从git中删除。</p><p>下载的工程带有submodule</p><p>当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p><blockquote><p><font color="#7ab2fa">git submodule update –init –recursive</font></p></blockquote><p>即可将子模块内容下载下来后工程才不会缺少相应的文件。</p><h3 id="git-add文件取消"><a href="#git-add文件取消" class="headerlink" title="git add文件取消"></a><font color="#006600">git add文件取消</font></h3><p>在git的一般使用中，如果发现错误的将不想提交的文件add进入index之后，想回退取消，则可以使用命令</p><blockquote><p><font color="#7ab2fa">git reset HEAD <file>…</font><br><font color="#7ab2fa">git reset（回退add操作）</font></p></blockquote><h3 id="git删除文件"><a href="#git删除文件" class="headerlink" title=" git删除文件"></a><font color="#006600"> git删除文件</font></h3><p>删除文件跟踪并且删除文件系统中的文件file1</p><blockquote><p><font color="#7ab2fa">git rm file1</font></p></blockquote><p>提交刚才的删除动作，之后git不再管理该文件</p><blockquote><p><font color="#7ab2fa">git commit</font></p></blockquote><p>删除文件跟踪但不删除文件系统中的文件</p><blockquote><p><font color="#7ab2fa">file1git rm –cached file1 </font></p></blockquote><p>提交刚才的删除动作，之后git不再管理该文件，但是文件系统中还是有file1</p><blockquote><p><font color="#7ab2fa">git commit</font></p></blockquote><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a><font color="#006600">版本回退</font></h3><p>版本回退用于线上系统出现问题后恢复旧版本的操作，回退到的版本。</p><blockquote><p><font color="#7ab2fa">git reset –hard 248cba8e77231601d1189e3576dc096c8986ae51 </font></p></blockquote><p>回退的是所有文件，如果后悔回退可以git pull就可以了。</p><h3 id="历史版本对比"><a href="#历史版本对比" class="headerlink" title="历史版本对比"></a><font color="#006600">历史版本对比</font></h3><p>查看日志git log<br>查看某一历史版本的提交内容，这里能看到版本的详细修改代码。</p><blockquote><p><font color="#7ab2fa">git show 4ebd4bbc3ed321d01484a4ed206f18ce2ebde5ca</font></p></blockquote><h3 id="分支的意义与管理"><a href="#分支的意义与管理" class="headerlink" title="分支的意义与管理"></a><font color="#006600">分支的意义与管理</font></h3><p>创建分支可以避免提交代码后对主分支的影响，同时也使你有了相对独立的开发环境。分支具有很重要的意义。<br>创建并切换分支，提交代码后才能在其它机器拉分支代码</p><blockquote><p><font color="#7ab2fa">git checkout -b new_branch </font></p></blockquote><p>查看当前分支</p><blockquote><p><font color="#7ab2fa">git branch </font></p></blockquote><p>切换到master分支</p><blockquote><p><font color="#7ab2fa">git checkout master </font></p></blockquote><p>合并分支到当前分支，合并分支的操作是从new_branch合并到master分支，当前环境在master分支。</p><blockquote><p><font color="#7ab2fa">git merge new_branch</font></p></blockquote><p>删除分支</p><blockquote><p><font color="#7ab2fa">git branch -d new_branch</font></p></blockquote><h3 id="git冲突文件编辑"><a href="#git冲突文件编辑" class="headerlink" title=" git冲突文件编辑"></a><font color="#006600"> git冲突文件编辑</font></h3><p>冲突文件冲突的地方如下面这样</p><p><img src="../../../../img/hade.jpg" alt="hade"></p><p>冲突标记&lt;&lt;&lt;&lt;&lt;&lt;&lt; （7个&lt;）与=======之间的内容是我的修改，=======与&gt;&gt;&gt;&gt;&gt;&gt;&gt;之间的内容是别人的修改。<br>此时，还没有任何其它垃圾文件产生。</p><h3 id="git顺利的提交代码流程"><a href="#git顺利的提交代码流程" class="headerlink" title="git顺利的提交代码流程"></a><font color="#006600">git顺利的提交代码流程</font></h3><p>查看修改的文件</p><blockquote><p><font color="#7ab2fa">git status</font></p></blockquote><p>为了谨慎检查一下代码</p><blockquote><p><font color="#7ab2fa">git diff</font></p></blockquote><p>添加修改的文件，新加的文件也是直接add就好了<br>你需要把代码合并好后重新走一遍代码提交流程就好了。</p><blockquote><p><font color="#7ab2fa">git add dirname1/filename1.py dirname2/filenam2.py</font></p></blockquote><p>添加修改的日志</p><blockquote><p><font color="#7ab2fa">git commit -m “fixed:修改了上传文件的逻辑”</font></p></blockquote><p>提交代码git push，如果提交失败的可能原因是本地代码库版本不是最新。</p><h3 id="创建和使用git-ssh-key"><a href="#创建和使用git-ssh-key" class="headerlink" title=" 创建和使用git ssh key"></a><font color="#006600"> 创建和使用git ssh key</font></h3><p>首先设置git的user name和email</p><blockquote><p><font color="#7ab2fa">git config –global user.name “xxx”<br>git config –global user.email “<a href="mailto:&#120;&#x78;&#120;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#120;&#x78;&#120;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;</a>“</font></p></blockquote><p>查看git配置</p><blockquote><p><font color="#7ab2fa">git config –list</font></p></blockquote><p>然后生成SHH密匙<br>查看是否已经有了ssh密钥：cd ~/.ssh<br>如果没有密钥则不会有此文件夹，有则备份删除<br>生成密钥</p><blockquote><p><font color="#7ab2fa">ssh-keygen -t rsa -C “<a href="mailto:&#x61;&#117;&#116;&#104;&#x7a;&#106;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x61;&#117;&#116;&#104;&#x7a;&#106;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a>“</font></p></blockquote><p>按3个回车，密码为空这里一般不使用密钥。<br>最后得到了两个文件：id_rsa和id_rsa.pub<br>注意：密匙生成就不要改了，如果已经生成到~/.ssh文件夹下去找。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用GIT在本地创建一个项目&quot;&gt;&lt;a href=&quot;#使用GIT在本地创建一个项目&quot; class=&quot;headerlink&quot; title=&quot;使用GIT在本地创建一个项目&quot;&gt;&lt;/a&gt;&lt;font color=&quot;#006600&quot;&gt;使用GIT在本地创建一个项目&lt;/font&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP的错误机制总结</title>
    <link href="http://www.fixblog.cn/2016/04/26/error/"/>
    <id>http://www.fixblog.cn/2016/04/26/error/</id>
    <published>2016-04-26T12:15:46.000Z</published>
    <updated>2021-02-23T08:28:54.620Z</updated>
    
    <content type="html"><![CDATA[<p>PHP的错误机制也是非常复杂的，做了几年php，也没有仔细总结过，现在就补上这一课。</p><p>特别说明：文章的PHP版本使用5.5.32</p><h3 id="PHP的错误级别"><a href="#PHP的错误级别" class="headerlink" title="PHP的错误级别"></a><font color="#006600">PHP的错误级别</font></h3><p>首先需要了解php有哪些错误。截至到php5.5，一共有16个错误级别</p><p>注意：尝试下面的代码的时候请确保打开error_log:</p><blockquote><p>error_reporting(E_ALL);<br>ini_set(‘display_errors’, ‘On’);</p></blockquote><h3 id="E-ERROR"><a href="#E-ERROR" class="headerlink" title="E_ERROR"></a><font color="#006600">E_ERROR</font></h3><p>这种错误是致命错误，会在页面显示Fatal Error， 当出现这种错误的时候，程序就无法继续执行下去了</p><p>错误示例：</p><blockquote><p>// Fatal error: Call to undefined function hpinfo() in /tmp/php/index.php on line 5<br>hpinfo();  //E_ERROR<br>注意，如果有未被捕获的异常，也是会触发这个级别的。</p></blockquote><h3 id="E-WARNING"><a href="#E-WARNING" class="headerlink" title="E_WARNING"></a><font color="#006600">E_WARNING</font></h3><p>这种错误只是警告，不会终止脚本，程序还会继续进行，显示的错误信息是Warning。比如include一个不存在的文件。</p><blockquote><p>//Warning: include(a.php): failed to open stream: No such file or directory in &gt; &gt; &gt; /tmp/php/index.php on line 7<br>//Warning: include(): Failed opening ‘a.php’ for inclusion &gt;&gt;(include_path=’.:/usr/share/pear:/usr/share/php’) in /tmp/php/index.php on line 7<br>include(“a.php”); //E_WARNING</p></blockquote><h3 id="E-NOTICE"><a href="#E-NOTICE" class="headerlink" title="E_NOTICE"></a><font color="#006600">E_NOTICE</font></h3><p>这种错误程度更为轻微一些，提示你这个地方不应该这么写。这个也是运行时错误，这个错误的代码可能在其他地方没有问题，只是在当前上下文情况下出现了问题。</p><p>比如$b变量不存在，我们把它赋值给另外一个变量</p><blockquote><p>//Notice: Undefined variable: b in /tmp/php/index.php on line 9<br>$a = $b; //E_NOTICE</p></blockquote><h3 id="E-PARSE"><a href="#E-PARSE" class="headerlink" title="E_PARSE"></a><font color="#006600">E_PARSE</font></h3><p>这个错误是编译时候发生的，在编译期发现语法错误，不能进行语法分析。</p><p>比如下面的z没有设置为变量。</p><blockquote><p>// Parse error: syntax error, unexpected ‘=’ in /tmp/php/index.php on line 20<br>z=1; // E_PARSE</p></blockquote><h3 id="E-STRICT"><a href="#E-STRICT" class="headerlink" title="E_STRICT"></a><font color="#006600">E_STRICT</font></h3><p>这个错误是PHP5之后引入的，你的代码可以运行，但是不是PHP建议的写法。<br>比如在函数形参传递++符号</p><blockquote><p>// Strict Standards: Only variables should be passed by reference in /tmp/php/index.php on &gt; line 17<br>function change (&amp;$var) {<br>$var += 10;<br> }<br> $var = 1;<br> change(++$var);<br> // E_STRICT</p></blockquote><h3 id="E-RECOVERABLE-ERROR"><a href="#E-RECOVERABLE-ERROR" class="headerlink" title="E_RECOVERABLE_ERROR"></a><font color="#006600">E_RECOVERABLE_ERROR</font></h3><p>这个级别其实是ERROR级别的，但是它是期望被捕获的，如果没有被错误处理捕获，表现和E_ERROR是一样的。<br>经常出现在形参定义了类型，但调用的时候传入了错误类型。它的错误提醒也比E_ERROR的fatal error前面多了一个Catachable的字样。</p><blockquote><p>//Catchable fatal error: Argument 1 passed to testCall() must be an instance of A, instance of B given, called in /tmp/php/index.php on line 37 and defined in /tmp/php/index.php on line 33<br>class A {<br>}<br>class B {<br>}<br>function testCall(A $a) {<br>}<br>$b = new B();<br>testCall($b);</p></blockquote><h3 id="E-DEPRECATED"><a href="#E-DEPRECATED" class="headerlink" title="E_DEPRECATED"></a><font color="#006600">E_DEPRECATED</font></h3><p>这个错误表示你用了一个旧版本的函数，而这个函数后期版本可能被禁用或者不维护了。<br>比如curl的CURLOPT_POSTFIELDS使用@FILENAME来上传文件的方法</p><blockquote><p>// Deprecated: curl_setopt(): The usage of the @filename API for file uploading is deprecated. Please use the CURLFile class instead in /tmp/php/index.php on line 42<br>$ch = curl_init(“<a href="http://www.remotesite.com/upload.php&quot;">http://www.remotesite.com/upload.php&quot;</a>);<br>curl_setopt($ch, CURLOPT_POSTFIELDS, array(‘fileupload’ =&gt; ‘@’. “test”));</p></blockquote><h3 id="E-CORE-ERROR-E-CORE-WARNING"><a href="#E-CORE-ERROR-E-CORE-WARNING" class="headerlink" title="E_CORE_ERROR, E_CORE_WARNING"></a><font color="#006600">E_CORE_ERROR, E_CORE_WARNING</font></h3><p>这两个错误是由PHP的引擎产生的，在PHP初始化过程中发生。</p><h3 id="E-COMPILE-ERROR-E-COMPILE-WARNING"><a href="#E-COMPILE-ERROR-E-COMPILE-WARNING" class="headerlink" title="E_COMPILE_ERROR, E_COMPILE_WARNING"></a><font color="#006600">E_COMPILE_ERROR, E_COMPILE_WARNING</font></h3><p>这两个错误是由PHP引擎产生的，在编译过程中发生。</p><h3 id="E-USER-ERROR-E-USER-WARNING-E-USER-NOTICE-E-USER-DEPRECATED"><a href="#E-USER-ERROR-E-USER-WARNING-E-USER-NOTICE-E-USER-DEPRECATED" class="headerlink" title="E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE, E_USER_DEPRECATED,"></a><font color="#006600">E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE, E_USER_DEPRECATED,</font></h3><p>这些错误都是用户制造的，使用trigger_error，这里就相当于一个口子给用户触发出各种错误类型。这个是一个很好逃避try catch异常的方式。</p><blockquote><p>trigger_error(“Cannot divide by zero”, E_USER_ERROR);<br>// E_USER_ERROR<br>// E_USER_WARING<br>// E_USER_NOTICE<br>// E_USER_DEPRECATED</p></blockquote><h3 id="E-ALL"><a href="#E-ALL" class="headerlink" title="E_ALL"></a><font color="#006600">E_ALL</font></h3><p>E_STRICT出外的所有错误和警告信息。</p><h3 id="错误控制"><a href="#错误控制" class="headerlink" title="错误控制"></a><font color="#006600">错误控制</font></h3><p>php中有很多配置和参数是可以控制错误，以及错误的日志显示的。第一步，我们需要了解的是php中的有关错误的配置有哪些？<br>我们按照php+php-fpm的模型来说，会影响php错误显示的其实是有两个配置文件，一个是php本身的配置文件php.ini，另外一个是php-fpm的配置文件，php-fpm.conf。</p><h3 id="php-ini中的配置"><a href="#php-ini中的配置" class="headerlink" title="php.ini中的配置"></a><font color="#006600">php.ini中的配置</font></h3><blockquote><p>error_reporting = E_ALL  // 报告错误级别，什么级别的<br>error_log = /tmp/php_errors.log // php中的错误显示的日志位置<br>display_errors = On // 是否把错误展示在输出上，这个输出可能是页面，也可能是stdout<br>display_startup_errors = On // 是否把启动过程的错误信息显示在页面上，记得上面说的有几个Core类型的错误是启动时候发生的，这个就是控制这些错误是否显示页面的。<br>log_errors = On // 是否要记录错误日志<br>log_errors_max_len = 1024 // 错误日志的最大长度<br>ignore_repeated_errors = Off // 是否忽略重复的错误<br>track_errors = Off // 是否使用全局变量$php_errormsg来记录最后一个错误<br>xmlrpc_errors = 0 //是否使用XML-RPC的错误信息格式记录错误<br>xmlrpc_error_number = 0 // 用作 XML-RPC faultCode 元素的值。<br>html_errors = On  // 是否把输出中的函数等信息变为HTML链接<br>docref_root = <a href="http://manual/en/">http://manual/en/</a> // 如果html_errors开启了，这个链接的根路径是什么<br>fastcgi.logging = 0 // 是否把php错误抛出到fastcgi中</p></blockquote><p>我们经常会被问到，error_reporting和display_errors有什么区别呢？这两个函数是完全不一样的。</p><p>PHP默认是会在日志和标准输出（如果是fpm模式标准输出就是页面）</p><p>error_reporting的参数是错误级别。表示什么样子的级别才应该触发错误。如果我们告诉PHP，所有错误级别都不需要触发错误，那么，不管是日志，还是页面，都不会显示这个错误，就相当于什么都没有发生。</p><p>display_errors是控制是否要在标准输出展示错误信息<br>log_errors则是控制是否要在日志中记录错误信息。</p><p>error_log是显示错误日志的位置，这个在php-fpm中往往会被重写，于是往往会发现的是cli和fpm的错误日志竟然不是在同一个文件中。</p><p>ignore_repeated_errors这个标记控制的是如果有重复的日志，那么就只会记录一条，比如下面的程序：</p><blockquote><p>error_reporting(E_ALL);<br>ini_set(‘ignore_repeated_errors’, 1);<br>ini_set(‘ignore_repeated_source’, 1);<br>$a = $c; $a = $c; //E_NOTICE<br>//Notice: Undefined variable: c in /tmp/php/index.php on line 20</p></blockquote><p>本来会出现两次NOTICE的，但是现在，只会出现一次了…</p><p>track_errors开启会把最后一个错误信息存储到变量里面去，这个可能在对记日志的时候会有一些用处吧。不过我觉得真是没啥用…</p><p>html_errors 和 docref_root 两个是个挺有人性化的配置，配置了这两个参数以后，我们返回的错误信息中如果有一些在文档中有的信息，就会变成链接形式。</p><blockquote><p>error_reporting(E_ALL);<br>ini_set(‘html_errors’, 1);<br>ini_set(‘docref_root’, “<a href="https://secure.php.net/manual/zh/&quot;">https://secure.php.net/manual/zh/&quot;</a>);<br>include(“a2.php”); //E_WARNING</p></blockquote><p>能让你快速定位到我们出现错误的地方。是不是很人性～</p><h3 id="php-fpm中的配置"><a href="#php-fpm中的配置" class="headerlink" title="php-fpm中的配置"></a><font color="#006600">php-fpm中的配置</font></h3><blockquote><p>error_log = /var/log/php-fpm/error.log // php-fpm自身的日志<br>log_level = notice // php-fpm自身的日志记录级别<br>php_flag[display_errors] = off // 覆盖php.ini中的某个配置变量，可被程序中的ini_set覆盖<br>php_value[display_errors] = off // 同php_flag<br>php_admin_value[error_log] = /tmp/www-error.log // 覆盖php.ini中的某个配置变量，不可被程序中的ini_set覆盖<br>php_admin_flag[log_errors] = on // 同php_admin_value<br>catch_workers_output = yes // 是否抓取fpmworker的输出<br>request_slowlog_timeout = 0 // 慢日志时长<br>slowlog = /var/log/php-fpm/www-slow.log // 慢日志记录</p></blockquote><p>php-fpm的配置中也有一个error_log配置，这个很经常会和php.ini中的error_log配置弄混。但他们记录的东西是不一样的，php-fpm的error_log只记录php-fpm本身的日志，比如fpm启动，关闭。</p><p>而php.ini中的error_log是记录php程序本身的错误日志。</p><p>那么在php-fpm中要覆盖php.ini中的error_log配置，就需要使用到下面几个函数：</p><ul><li>php_flag</li><li>php_value</li><li>php_admin_flag</li><li>php_admin_value</li></ul><p>这四个函数admin的两个函数说明这个变量设置完之后，不能在代码中使用ini_set把这个变量重新赋值了。而php_flag/value就仍然以php代码中的ini_set为准。</p><p>slowlog是fpm记录的，可以使用request_slowlog_timeout设置判断慢日志的时长。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP的错误机制也是非常复杂的，做了几年php，也没有仔细总结过，现在就补上这一课。&lt;/p&gt;
&lt;p&gt;特别说明：文章的PHP版本使用5.5.32&lt;/p&gt;
&lt;h3 id=&quot;PHP的错误级别&quot;&gt;&lt;a href=&quot;#PHP的错误级别&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
</feed>
