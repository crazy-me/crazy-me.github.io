{"meta":{"title":"fixblog-侯爽","subtitle":"","description":"","author":"John Doe","url":"http://www.fixblog.cn","root":"/"},"pages":[{"title":"Repositories","date":"2021-02-23T10:37:54.689Z","updated":"2021-02-23T09:10:36.360Z","comments":false,"path":"repository/index.html","permalink":"http://www.fixblog.cn/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-02-23T10:44:32.085Z","updated":"2021-02-23T09:10:36.360Z","comments":false,"path":"tags/index.html","permalink":"http://www.fixblog.cn/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-02-23T10:40:12.395Z","updated":"2021-02-23T09:10:36.360Z","comments":false,"path":"categories/index.html","permalink":"http://www.fixblog.cn/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-02-23T10:41:37.592Z","updated":"2021-02-23T09:10:36.360Z","comments":true,"path":"links/index.html","permalink":"http://www.fixblog.cn/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Centos下安装配置Redis","slug":"centos-redis","date":"2018-05-04T15:01:35.000Z","updated":"2021-02-23T10:09:37.376Z","comments":true,"path":"2018/05/04/centos-redis/","link":"","permalink":"http://www.fixblog.cn/2018/05/04/centos-redis/","excerpt":"","text":"下载1[root@bo local]# wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-4.0.9.tar.gz # 改变版本选择相应版本 1[root@bo local]# tar -zxvf redis-4.0.9.tar.gz # 解压 安装123[root@bo local]# cd &#x2F;usr&#x2F;local&#x2F;redis-4.0.9 # 进入解压的目录[root@bo local]# make MALLOC&#x3D;libc # 编译安装[root@bo local]# cd &#x2F;src &amp;&amp; make install # 将src目录下的文件添加到&#x2F;usr&#x2F;local&#x2F;bin目录下 配置12[root@bo local]# cd &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;src[root@bo local]# .&#x2F;redis-server # 启动redis 后台运行 12[root@bo local]# vim &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;redis.conf将 daemonize no 配置项修改为 daemonize yes redis后台运行 配置文件 1234在&#x2F;etc&#x2F;目录下创建redis目录[root@bo local]# mkdir &#x2F;etc&#x2F;redis将redis.conf配置文件复制一份到&#x2F;etc&#x2F;redis目录下并改名为6379.conf[root@bo local]# cp &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;redis.conf &#x2F;etc&#x2F;redis&#x2F;6379.conf 启动脚本 12将redis的启动将本复制到系统init.d目录下[root@bo local]# cp &#x2F;usr&#x2F;local&#x2F;redis-4.0.9&#x2F;utils&#x2F;redis_init_script &#x2F;etc&#x2F;init.d&#x2F;redisd 配置开机自启动 12[root@bo local]# cd &#x2F;etc&#x2F;init.d[root@bo local]# chkconfig redisd on # 执行自启命令 12redis 启动 service redisd startredis 关闭 service redisd stop","categories":[],"tags":[]},{"title":"jetbrains激活教程","slug":"jetbrains-agent","date":"2017-04-24T04:57:00.000Z","updated":"2021-02-23T08:29:54.615Z","comments":true,"path":"2017/04/24/jetbrains-agent/","link":"","permalink":"http://www.fixblog.cn/2017/04/24/jetbrains-agent/","excerpt":"","text":"此教程来源于网络只用作个人学习和分享，勿用于商业谋利 资源获取本激活方法需使用jar包以及专用激活码，获取方法见下文。 配置从官网下载对应的IDE安装完成后打开点击**Evaluate for free** 免费使用，随意创建一个空的项目使之进入到IDE的工作页面在此点击IDE菜单栏中的Help - Edit Custom VM Option... 打开此文件， 将jetbrains-agent.jar文件放到IDE安装目录的bin目录下并在此文件中配置 1-javaagent:&#x2F;Applications&#x2F;GoLand.app&#x2F;Contents&#x2F;bin&#x2F;jetbrains-agent.jar # 填写自己的路径 修改完配置文件后重启IDE！ 激活码 重启IDE后，点击菜单栏中的Help Register...进行激活 License server 方式激活 地址填写 : http://jetbrains-license-server 或点击Discover Server来填充地址激活 Activation code 方式激活 直接复制激活码激活(激活码见下文) 验证 完成激活后点击Help About 可查看IDE版本号，有效期等信息 资源 Jar 包：网盘连接 密码:ssnz License server地址：http://jetbrains-license-server 激活码 1520E5894E2-eyJsaWNlbnNlSWQiOiI1MjBFNTg5NEUyIiwibGljZW5zZWVOYW1lIjoicGlnNiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiJVbmxpbWl0ZWQgbGljZW5zZSB0aWxsIGVuZCBvZiB0aGUgY2VudHVyeS4iLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJEQiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlJNIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiRE0iLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkdPIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In1dLCJoYXNoIjoiODkwNzA3MC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-DZ&#x2F;oNHBfyho0XrrCJJvAOKg5Q1tLBgOdbCmzCKwkuM+Yryce0RoOi3OOmH6Ba&#x2F;uTcCh&#x2F;L37meyD0FJdJIprv59y4+n+k2kIeF&#x2F;XKrKqg0dEsDUQRw0lUqqMt99ohqa+zmbJ44Yufdwwx&#x2F;F1CtoRGvEQ2Mn0QjuqRoZJZ3wiT5Am22JiJW8MaNUl3wg9YPj+OPGARKKJUdUJ0NGUDQBcBAv5ds8LhbSbJSbPkbkwH&#x2F;a1QMz4nEdn6lRDKI1aFIn43QhBSCFqvUq6TPJlbIJ0ZjE+PyZjHFBKCgkry0DHPXU2BbtIZPsksQnN3fx240a9K6sN7peZnLpEoMoq23FEz4g&#x3D;&#x3D;-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG&#x2F;PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg&#x2F;nYV31HLF7fJUAplI&#x2F;1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl&#x2F;GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4&#x2F;G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd&#x2F;GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt&#x2F;wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59&#x2F;THOT7NJQhr6AyLkhhJCdkzE2cob&#x2F;KouVp4ivV7Q3Fc6HX7eepHAAF&#x2F;DpxwgOrg9smX6coXLgfp0b1RU2u&#x2F;tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB&#x2F;40BjpMUrDRCeKuiBahC0DCoU&#x2F;4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV&#x2F;g&#x3D;&#x3D; 此方法对 **jetbrains**系列产品有效","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://www.fixblog.cn/tags/php/"}]},{"title":"mysql事物","slug":"mysql-transaction","date":"2017-04-12T03:17:13.000Z","updated":"2021-02-23T08:30:16.717Z","comments":true,"path":"2017/04/12/mysql-transaction/","link":"","permalink":"http://www.fixblog.cn/2017/04/12/mysql-transaction/","excerpt":"","text":"MySql版本链1对于使用InnoDB存储引擎的表来说它的聚簇索引记录中都包含两个必要的隐藏列(row_id并不是必要的，我们创建的表中有主键或者非NULL唯一建时都不会包含row_id列) trx_id:每次对某条记录进行改变时，都会把对应的事物ID赋值给trx_id隐藏列 roll_pointer:每次对某条记录进行改变时，这个隐藏列会存一个指针，可以通过这个指针找到该记录修改前的信息 MySql ReadView1对于使用READ UNCOMMITTED 隔离级别的事物来说直接读取记录的最新版本就好了,对于使用SERIALIZABLE 隔离级别的事物来说使用加锁的方式来访问记录，对于使用READ COMMITTEDD和REPEATABLE READ 隔离级别的事物来说就需要用到版本链了，核心问题就是需要判断以下版本链中的那个版本是当前事物中可见的。 m_ids：表示在生成ReadView时当前系统中活跃的(没有提交的)读写事物的事物ID列表 min_trx_id：表示在生成ReadView时当前系统中活跃的读写事物中最小的事物ID也就是m_ids中的最小值 max_trx_id：表示在生成ReadView时系统中应该分配给写一个事物ID的值 creator_trx_id：表示生成该ReadView的事物ID MySql 隔离级别 查看当前会话的隔离级别 1select @@tx_isolation; Mysql8 改为 transaction_isolation参数 查看系统当前隔离级别 1select @@global.tx_isolation; 设置当前会话隔离级别 1MySql8以下 set session transaction isolatin level repeatable read; 设置系统当前隔离级别 1set global transaction isolation level repeatable read; 关于隔离级别的理解12read uncommitted 读未提交一个事物可以读到其他事物还未提交的数据，例如:SESSION_A的操作还未提交但是SESSION_B就可以看到SESSION_A操作的结果 这种现象为(脏读) 123read committed 读提交 不可重复读一个事物只能读到另一个已经提交的事物修改过的数据,可能多次读取的数据结果不一致如果一个事物先根据某些条件查询出一些记录，之后另一个事物又向表中写入了符合这些条件的记录,原来的事物再次按照该条件查询时能把另一个事物写入的记录也读出来(幻读) 12repeatable read 可重复读SESSION_A第一次读过某条记录后即使SESSION_B修改了该记录的值并提交SESSION_A之后再去读这条记录时读到的任然是第一次读到的值这种隔离级别解决了不可重复但还是会出现幻读。 123serializable 串行化串行化不允许读-写，写-读的并发操作，这种隔离级别对同一条记录的操作是串行的，所以不会出现脏读，幻读等现象。例如：SESSION_A要读 SESSION_B要写 而SESSION_B只有等SESSION_A事物完成并提交后才能对当前记录的操作，中间会有阻塞的现象。 总结 READ UNCOMMITTED 隔离级别下，可能发生脏读 ，不可重复读，幻读的问题。 READ COMMITTED 隔离级别下，可能发生不可重复读和幻读的问题，但不会发生脏读的问题 REPEATABLE READ 隔离级别下，可能发生幻读，不会发生脏读和不可重复读的问题。 SERIALIZABLE 隔离级别下，各种问题都不可以发生。 注意：这四种隔离级别是SQL的标准定义，不同的数据库会有不同的实现，特别需要注意的是 MySql在REPEATABLE READ隔离级别下是可以禁止幻读问题的发生。","categories":[],"tags":[]},{"title":"Centos7下安装MySql8","slug":"centos-mysql","date":"2017-04-05T08:58:22.000Z","updated":"2021-02-23T08:27:30.043Z","comments":true,"path":"2017/04/05/centos-mysql/","link":"","permalink":"http://www.fixblog.cn/2017/04/05/centos-mysql/","excerpt":"","text":"下载进入官网下载自己合适的MySql8安装包 12mysql-8.0.15-el7-x86_64.tar.gz 上传至服务器中解压 tar -zxvf mysql-8.0.15-el7-x86_64.tar.gz 安装将解压后的目录移动到/usr/local/ 并修改目录名为mysql 1mv mysql-8.0.15-el7-x86_64.tar.gz &#x2F;usr&#x2F;local&#x2F;mysql 添加mysql 运行用户和组 12添加mysql组 groupadd mysql添加mysql用户并加入到mysql组中 useradd -r -g mysql mysql 修改mysql为 mysql 组和mysql用户 1chown -R mysql:mysql &#x2F;usr&#x2F;local&#x2F;mysql 初始化配置，会产生临时密码需记住用来第一次登陆 12进入mysql目录 cd &#x2F;usr&#x2F;local&#x2F;mysql初始化 bin&#x2F;mysqld --initialize --user&#x3D;mysql --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql -- datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data 查看是否有生成my.cnf配置文件 12进入&#x2F;etc目录 cd &#x2F;etcls | grep my.cnf 如果没有自动生成/etc/my.cnf 则手动创建一个 12创建my.cnf配置文件 touch &#x2F;etc&#x2F;my.cnf修改权限 chmod 755 &#x2F;etc&#x2F;my.cnf 配置编辑my.cnf配置文件 1234567[mysqld]basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql # mysql目录datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data # mysql数据目录port&#x3D;3306 # mysql端口socket&#x3D;&#x2F;tmp&#x2F;mysql.sock # mysql的套接字pid-file&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;$hostname.pid # $hostname为主机名称sql_mode&#x3D;NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES 配置mysql环境变量 1234vim &#x2F;etc&#x2F;profile # 打开profile文件export MYSQL_HOME MYSQL_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mysqlexport PATH&#x3D;$PATH:$MYSQL_HOME&#x2F;lib:$MYSQL_HOME&#x2F;bin保存后 source &#x2F;etc&#x2F;profile 让配置生效 配置mysql开机启动项 1234cp &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysql加执行权限 chmod +x &#x2F;etc&#x2F;init.d&#x2F;mysql注册启动服务 chkconfig --add mysql查看启动服务 chkconfig --list 启动123启动 service mysql start停止 service mysql stop重启 service mysql restart 使用初始化是生成的密码登陆 12mysql -u root -pPassword: evoeJ%b13d0h 修改新的密码 1alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;your_password&#39;;","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://www.fixblog.cn/tags/mysql/"}]},{"title":"consul配置","slug":"consul","date":"2017-03-22T07:02:01.000Z","updated":"2021-02-23T09:55:50.695Z","comments":true,"path":"2017/03/22/consul/","link":"","permalink":"http://www.fixblog.cn/2017/03/22/consul/","excerpt":"","text":"官网 https://www.consul.io/downloads.html 集群启动 12345consul agent -server -bootstrap-expect=3 -data-dir=/var/consul -node=node-172.16.4.49 -bind=172.16.4.49 -client=0.0.0.0 -datacenter=BeiJing -uiconsul agent -server -bootstrap-expect=3 -data-dir=/var/consul -node=node-172.16.4.50 -bind=172.16.4.50 -client=0.0.0.0 -datacenter=BeiJing -uiconsul agent -server -bootstrap-expect=3 -data-dir=/var/consul -node=node-172.16.4.53 -bind=172.16.4.53 -client=0.0.0.0 -datacenter=BeiJing -ui 参数说明 server： 以server身份启动。默认是client bootstrap-expect：集群要求的最少server数量，当低于这个数量，集群即失效。 data-dir：data存放的目录，更多信息请参阅consul数据同步机制 node：节点id，集群中的每个node必须有一个唯一的名称。默认情况下，Consul使用机器的hostname bind：监听的ip地址。默认绑定0.0.0.0，可以不指定。表示Consul监听的地址,而且它必须能够被集群中的其他节点访问。Consul默认会监听第一个private IP,但最好还是提供一个。生产设备上的服务器通常有好几个网卡，所以指定一个不会出错 client: 客户端的ip地址，0.0.0.0是指谁都可以访问（不加这个，下面的ui :8500无法访问） ui: 可以访问UI界面 -config-dir指定配置文件夹，Consul会加载其中的所有文件 -datacenter 指定数据中心名称，默认是dc1 组成consul集群 12# 将另外两台机器加入到172.16.4.49consul join 172.16.4.49 集群状态 1consul operator raft list-peers 服务注册 123方法：PUT请求：http://127.0.0.1:8500/v1/agent/service/register参数：application/json 12345678910111213141516171819202122&#123; &quot;ID&quot;: &quot;os_snmp-v3&quot;, &quot;Name&quot;: &quot;snmp-v3&quot;, &quot;Tags&quot;: [&quot;snmp&quot;, &quot;v3&quot;], &quot;Address&quot;: &quot;172.16.2.177&quot;, &quot;Port&quot;: 8888, &quot;EnableTagOverride&quot;: false, &quot;Check&quot;: &#123; // 健康检查 &quot;Notes&quot;: &quot;Ensure we don&#x27;t oversubscribe memory&quot;, &quot;DeregisterCriticalServiceAfter&quot;: &quot;服务注销时间秒 如果服务异常时&quot;, &quot;Args&quot;: [&quot;指定要运行的命令参数以更新检查状态&quot;], &quot;DockerContainerID&quot;: &quot;指定检查是Docker检查&quot;, &quot;HTTP&quot;: &quot;http检查模式&quot;, &quot;Method&quot;: &quot;http检查方式 默认GET&quot;, &quot;Header&quot;: &#123; &quot;Content-Type&quot;: [&quot;指定一组应为HTTP检查设置的标题&quot;] &#125;, &quot;Body&quot;: &quot;&#123;指定应与HTTP支票一起发送的正文。&#125;&quot;, &quot;TCP&quot;: &quot;指定TCP以每个值连接TCP&quot;, &quot;Interval&quot;: &quot;指定运行此检查的频率&quot;, &quot;Timeout&quot;: &quot;在脚本，HTTP，TCP或gRPC检查的情况下，指定传出连接的超时&quot;, &quot;TLSSkipVerify&quot;: &quot;指定是否不验证HTTPS检查的证书。(布尔值)&quot; &#125;&#125;","categories":[],"tags":[]},{"title":"Linux搭建GitLab服务器","slug":"git-lab","date":"2017-03-22T07:02:01.000Z","updated":"2021-02-23T08:29:08.707Z","comments":true,"path":"2017/03/22/git-lab/","link":"","permalink":"http://www.fixblog.cn/2017/03/22/git-lab/","excerpt":"","text":"GitLab简介 GitLab 是利用 Ruby On Rails 一个开源的版本管理系统，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与 GitHub 类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序( Wall )进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。 资料 官方:https://about.gitlab.com/downloads/#ubuntu1404 国内镜像:https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/ 安装和配置必要的依赖 如果你安装 postfix 发送邮件，如果你不需要邮件发送,可以跳过直接看第二步,请选择“网站设置”中。而不是使用后缀也可以使用道具或配置自定义 SMTP 服务器和它配置为 SMTP 服务器。在 CentOS 的6和7，下面的命令将在系统防火墙打开 HTTP 和 SSH 访问。 1sudo apt-get install curl openssh-server ca-certificates postfix 切换清华大学镜像 首先信任 GitLab 的 GPG 公钥: 1curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;gpg.key 2&gt; &#x2F;dev&#x2F;null | sudo apt-key add - &amp;&gt;&#x2F;dev&#x2F;null 选择你的 Debian/Ubuntu 版本， 其他版本请跳转国内镜像查看/etc/apt/sources.list.d/gitlab-ce.list 这个文件默认不存在 你需要创建并添加下面配置 12vim &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;gitlab-ce.list 加入以下内容deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;gitlab-ce&#x2F;ubuntu trusty main 添加完成执行更新 并安装gitlab 12sudo apt-get update sudo apt-get install gitlab-ce ####配置文件和修改域名 123&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb修改 &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb文件external_url &#39;你的域名&#39; ####配置邮箱 12345678910111213#Sending application email via SMTPgitlab_rails[&#39;smtp_enable&#39;] &#x3D; true gitlab_rails[&#39;smtp_address&#39;] &#x3D; &quot;smtp.163.com&quot; gitlab_rails[&#39;smtp_port&#39;] &#x3D; 25 gitlab_rails[&#39;smtp_user_name&#39;] &#x3D; &quot;xxuser@163.com&quot; gitlab_rails[&#39;smtp_password&#39;] &#x3D; &quot;xxpassword&quot; gitlab_rails[&#39;smtp_domain&#39;] &#x3D; &quot;163.com&quot; gitlab_rails[&#39;smtp_authentication&#39;] &#x3D; :login gitlab_rails[&#39;smtp_enable_starttls_auto&#39;] &#x3D; true##修改 gitlab 配置的发信人gitlab_rails[&#39;gitlab_email_from&#39;] &#x3D; &quot;xxuser@163.com&quot; user[&quot;git_user_email&quot;] &#x3D; &quot;xxuser@163.com&quot; 如果执行不成功 请检查配置和内存 gitlab-ctl reconfigure 重新编译启动 文档地址 apt-get 安装默认集成了 nginx 如果你需要服务器在跑其他环境,你需要修改你的gitlab nginx 的端口 12vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rbnginx[&#39;listen_port&#39;] &#x3D; 8080 可使用 gitlab-ctl help 查看更多命令","categories":[],"tags":[]},{"title":"phpstorm-速查表","slug":"phpstorm-quick-check-list","date":"2017-03-17T06:40:44.000Z","updated":"2021-02-23T08:30:53.864Z","comments":true,"path":"2017/03/17/phpstorm-quick-check-list/","link":"","permalink":"http://www.fixblog.cn/2017/03/17/phpstorm-quick-check-list/","excerpt":"","text":"Mac基本按键说明123456⌘——Command⌃ ——Control⌥——Option/Alt⇧——Shift⇪——Caps Lockfn——功能键就是fn 快捷调试1234Control+alt+R 运行项目 Command+Control+R 运行Debug Command+F8 添加断点 Command+shift+F8 打开断点列表 编辑功能1234567891011121314151617181920212223242526Command+alt+T 用 (if..else, try..catch, for, etc.)包住 Command+&#x2F; 注释&#x2F;取消注释的行注释 Command+alt+&#x2F; 注释&#x2F;取消注释与块注释 alt+↑ 向上选取代码块 alt+↓ 向下选取代码块 Command+alt+L 格式化代码 tab,shift+tab 调整缩进 Control+alt+I 快速调整缩进 Command+C 复制 Command+X 剪切 Command+V 粘贴 Command+shift+V 从剪贴板里选择粘贴 Command+D 复制代码副本 Command+delete 删除当前行 Control+Shift+J 清除缩进变成单行 shift+回车 快速换行 Command+回车 换行光标还在原先位置 Command+shift+U 大小写转换 Command+shift+[,Command+shift+] 文件选项卡快速切换 Command+加号,Command+减号 收缩代码块 Command+shift+加号，Command+shift+减号 收缩整个文档的代码块 Command+W 关闭当前文件选项卡 alt+单击 光标在多处定位 Control+shift+J 把下面行的缩进收上来 shift + F6 高级修改，可快速修改光标所在的标签、变量、函数等 alt+&#x2F; 代码补全 定点导航123456789101112131415161718192021Command+O 跳转到某个类 Command+shift+O 跳转到某个文件 Command+alt+O 跳转到某个符号 Control+←,Control+→ 转到上&#x2F;下一个编辑器选项卡 F12 打开之前打开的工具窗口（TODO、终端等） Command+L 跳转行 Command+E 弹出最近文件 Command+alt+←,Command+alt+→ 向前向后导航到代码块交接处（一般是空行处） Command+shift+delete 导航到上一个编辑位置的位置 Command+B 跳转到变量声明处 Control+J 获取变量相关信息（类型、注释等，注释是拿上一行的注释） Command+Y 小浮窗显示变量声明时的行 Command+[,Command+] 光标现在的位置和之前的位置切换 Command+F12 文件结构弹出式菜单 alt+H 类的层次结构 F2,shift+F2 切换到上\\下一个突出错误的位置 Command+↑ 跳转到导航栏 F3 添加书签 alt+F3 添加带助记的书签 alt+1,alt+2… 切换到相应助记的书签位置 Command+F3 打开书签列表 VCS/本地历史记录1234control+V 打开VST小浮窗 Command+K 提交项目 Command+T 更新项目 alt+shift+C 打开最近修改列表 搜索和替换123456Command+F 搜索 Command+R 替换 Command+G 查找下一个 Command+shift+G 查找下一个 Command+shift+F 按路径搜索 Command+shift+R 按路径替换 选中文字的搜索123Command+F7 向声明的地方搜索并选中 Command+shift+F7 打开搜索框进行搜索 Command+alt+F7 打开小浮窗显示搜索列表 对项目文件的操作1234F5 复制文件到某个目录 F6 移动文件到某个目录 Command+delete 安全删除 shift+F6 重命名 全局快捷键12345678910双击shift 弹出小浮窗搜索所有Command+~切换项目 Command+shift+~ 反向切换项目 (在打开的不同项目中切换) Command+shift+A 整个工程的查找操作 Command+1,Command+2… 打开各种工具窗口 alt+shift+F 把文件添加到收藏夹 alt+shift+I 打开项目描述 alt+~ 快速切换当前计划 Command+, 设置编辑器 Control+Tab 选项卡和工具窗口之间进行切换 alert+回车 显示npm版本升级列表","categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://www.fixblog.cn/tags/php/"}]},{"title":"记录Hexo博客的搭建","slug":"centos-hexo","date":"2017-02-03T07:42:07.000Z","updated":"2021-02-23T08:27:10.021Z","comments":true,"path":"2017/02/03/centos-hexo/","link":"","permalink":"http://www.fixblog.cn/2017/02/03/centos-hexo/","excerpt":"","text":"简介记录在Centos系统上搭建Hexo博客框架,实现简单的个人博客。(本次记录客户端以Mac os为例,服务端以阿里云ECS为例) Hexo介绍 Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo使用Node.js来渲染页面，因此渲染速度极快。只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。同时，Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 准备 Git For Mac Git For Win Nodejs For Mac Nodejs For Win Nginx 下载对应版本 客户端配置 安装Git及配置 Mac下直接下载后缀为.pkg的Git文件进行傻瓜式安装即可,安装完成后可查看版本确认 12author$ git versionauthor$ git version 2.15.0 配置用户名及邮箱 12author$ git config --global user.name &quot;用户名&quot;author$ git config --global user.email &quot;邮箱&quot; 确认是否生成SSH Key 1author$ ls ~&#x2F;.ssh 如果没有SSH Key 则创建一个 1author$ ssh-keygen -t rsa -C &quot;邮箱&quot; 安装Nodejs 下载后缀为.pkg的Nodejs安装文件进行安装即可，安装完成后可查看node和npm版本确认 12author$ node -vv12.14.1 12author$ npm -v6.13.4 安装Hexo框架 直接通过npm来全局安装Hexo框架 1author$ npm install -g hexo-cli 漫长的等待完成Hexo框架安装之后再进行初始化，选择一个目录来存放博客文件 12author$ cd fixblogauthor$ hexo init blog #初始化 初始化完成以后打开blog目录下的package.json文件，在dependencies的配置项中追加Git选项，然后使用npm进行包的安装。 12author$ cd blogauthor$ vi package.json 1author$ npm install 包安装完成以后可直接启动博客然后在浏览器通过localhost:4000进行访问Hexo博客默认页面了 12author$ cd blogauthor$ hexo s 至此在客户端的Hexo框架安装及相关配置就完成了 服务端配置 安装Nginx Centos下安装使用yum安装或者到官网下载源码安装即可安装完成后通过IP访问出现以下页面表示安装成功 在Nginx安装目录下的vhost目录下新建后缀为.conf的配置文件来配置域名及博客目录 12author$ cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhostauthor$ touch fixblog.cn.conf 在新建的fixblog.cn.conf配置文件中配置以下信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748server &#123; #listen [::]:80 default_server ipv6only&#x3D;on; server_name www.fixblog.cn fixblog.cn; #域名 index index.php index.html index.htm; root &#x2F;home&#x2F;wwwroot&#x2F;blog; #博客目录 #error_page 404 &#x2F;404.html; # Deny access to PHP files in specific directory #location ~ &#x2F;(wp-content|uploads|wp-includes|images)&#x2F;.*\\.php$ &#123; deny all; &#125; include enable-php.conf; location &#x2F;nginx_status &#123; stub_status on; access_log off; &#125; location &#x2F; &#123; if (!-e $request_filename) &#123; rewrite ^(.*)$ &#x2F;index.php?s&#x3D;&#x2F;$1 last; break; &#125; #try_files $uri $uri&#x2F; &#x2F;index.php?$query_string; &#125; location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\\.(js|css)?$ &#123; expires 12h; &#125; location ~ &#x2F;.well-known &#123; allow all; &#125; location ~ &#x2F;\\. &#123; deny all; &#125; access_log &#x2F;home&#x2F;wwwlogs&#x2F;access.log; &#125; 至此，Nginx的配置基本完成了。 安装Nodejs Centos下可直接使用yum来安装Nodejs，安装完成后检查nodejs和npm版本信息 123author$ yum install -y nodejsauthor$ node -vauthor$ npm -v 安装Git及配置 Centos下可直接使用yum来安装Git，安装完成后检查Git版本信息 12author$ yum install gitauthor$git version 创建git用户及密码 12author$ adduser gitauthor$ passwd git 把git用户添加到sudo用户组当中 1author$ vi &#x2F;etc&#x2F;sudoers 切换到git用户并将客户端生成SSH Key的公钥加入到服务器~/.ssh/authorized_keys文件中 12author$ su gitauthor$ vi ~&#x2F;.ssh&#x2F;authorized_keys #将客户端的公钥加入到此文件 12author$ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys # 添加权限author$ chmod 700 ~&#x2F;.ssh 配置完成后返回客户端测试是否可以连接 1author$ ssh -v git@serverIp 创建Nginx所配置的博客目录 /home/wwwroot/blog 并授予git用户 12author$ sudo mkdir -p &#x2F;home&#x2F;wwwroot&#x2F;blog # 创建博客目录author$ sudo chown -R git:git &#x2F;home&#x2F;wwwroot&#x2F;blog 在服务器上初始化一个git裸仓库并创建一个post-receive文件给予执行权限 1234567author$ su git # 切换git用户author$ cd ~ # 进入当前用户的家目录author$ git init --bare blog.gitauthor$ vim ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive # 新建post-receive文件加入以下内容#！&#x2F;bin&#x2F;shgit --work-tree&#x3D;&#x2F;博客目录路径&#x2F; --git-dir&#x3D;&#x2F;初始化git仓库路径&#x2F; checkout -f 1author$ chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive #赋予执行权限 返回客户端配置博客根目录下的 _config.yml文件，配置Git提交地址。 12345deploy: type: &#39;git&#39; repo: git@serverIp:&#x2F;home&#x2F;git&#x2F;fixblog.git # 服务器初始化的git仓库地址 branch: master message: 保存后使用以下命令测试 123hexo clean # 清除hexo博客缓存hexo g # 重新生成博客静态文件hexo d # 将hexo博客推送到服务器 以上命令都正常执行后就可通过Nginx中配置的域名访问博客了。","categories":[],"tags":[{"name":"linux hexo","slug":"linux-hexo","permalink":"http://www.fixblog.cn/tags/linux-hexo/"}]},{"title":"GIT简介","slug":"git","date":"2016-05-21T06:34:23.000Z","updated":"2021-02-23T08:31:38.456Z","comments":true,"path":"2016/05/21/git/","link":"","permalink":"http://www.fixblog.cn/2016/05/21/git/","excerpt":"","text":"使用GIT在本地创建一个项目 $ mkdir ~/hello-world //创建一个项目hello-world$ cd ~/hello-world //打开这个项目$ git init //初始化$ touch README$ git add README //更新README文件$ git commit -m ‘first commit’ //提交更新，并注释信息“first commit”$ git remote add origin &#103;&#x69;&#x74;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#x74;&#x65;&#115;&#116;/hellotest.git //连接远程github项目$ git push -u origin master //将本地项目更新到github项目上去 git设置关闭自动换行 $ git config –global core.autocrlf false 为了保证文件的换行符是以安全的方法，避免windows与unix的换行符混用的情况，最好也加上这么一句 $ git config –global core.safecrlf true git tag 使用 git tag # 列出当前仓库的所有标签git tag -l ‘v0.1.*’ # 搜索符合当前模式的标签git tag v0.2.1-light # 创建轻量标签git tag -a v0.2.1 -m ‘0.2.1版本’ # 创建附注标签git checkout [tagname] # 切换到标签git show v0.2.1 # 查看标签版本信息git tag -d v0.2.1 # 删除标签git tag -a v0.2.1 9fbc3d0 # 补打标签git push origin v0.1.2 # 将v0.1.2标签提交到git服务器git push origin –tags # 将本地所有标签一次性提交到git服务器git tag # 查看当前分支下的标签 git pull问题 You asked me to pull without telling me which branch youwant to merge with, and ‘branch.content_api_zhangxu.merge’ inyour configuration file does not tell me, either. Pleasespecify which branch you want to use on the command line andtry again (e.g. ‘git pull ‘).See git-pull(1) for details.If you often merge with the same branch, you may want touse something like the following in your configuration file: [branch “content_api_zhangxu”] remote = merge = [remote ““] url = fetch = See git-config(1) for details.git pull origin new_branch 怎样遍历移除项目中的所有 .pyc 文件 sudo find /tmp -name “*.pyc” | xargs rm -rf 替换/tmp目录为工作目录 git rm *.pyc git变更项目地址 git remote set-url origin &#103;&#105;&#116;&#64;&#49;&#x39;&#x32;&#46;&#49;&#x36;&#56;&#46;&#x36;&#x2e;&#x37;&#48;:res_dev_group/test.gitgit remote -v 查看某个文件的修改历史 git log –pretty=oneline 文件名 # 显示修改历史git show 356f6def9d3fb7f3b9032ff5aa4b9110d4cca87e # 查看更改 git push 时报错 warning: push.default is unset‘matching’ 参数是 Git 1.x 的默认行为，其意是如果你执行 git push 但没有指定分支，它将 push 所有你本地的分支到远程仓库中对应匹配的分支。而 Git 2.x 默认的是 simple，意味着执行 git push 没有指定分支时，只有当前分支会被 push 到你使用 git pull 获取的代码。根据提示，修改git push的行为: git config –global push.default matching 再次执行git push 得到解决 git submodule的使用拉子项目代码开发过程中，经常会有一些通用的部分希望抽取出来做成一个公共库来提供给别的工程来使用，而公共代码库的版本管理是个麻烦的事情。今天无意中发现了git的git submodule命令，之前的问题迎刃而解了 git submodule add 仓库地址 路径 其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。注意：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能順利 Clone） 命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。 submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行git rm –cached命令将子模块所在的文件从git中删除。 下载的工程带有submodule 当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令： git submodule update –init –recursive 即可将子模块内容下载下来后工程才不会缺少相应的文件。 git add文件取消在git的一般使用中，如果发现错误的将不想提交的文件add进入index之后，想回退取消，则可以使用命令 git reset HEAD …git reset（回退add操作） git删除文件删除文件跟踪并且删除文件系统中的文件file1 git rm file1 提交刚才的删除动作，之后git不再管理该文件 git commit 删除文件跟踪但不删除文件系统中的文件 file1git rm –cached file1 提交刚才的删除动作，之后git不再管理该文件，但是文件系统中还是有file1 git commit 版本回退版本回退用于线上系统出现问题后恢复旧版本的操作，回退到的版本。 git reset –hard 248cba8e77231601d1189e3576dc096c8986ae51 回退的是所有文件，如果后悔回退可以git pull就可以了。 历史版本对比查看日志git log查看某一历史版本的提交内容，这里能看到版本的详细修改代码。 git show 4ebd4bbc3ed321d01484a4ed206f18ce2ebde5ca 分支的意义与管理创建分支可以避免提交代码后对主分支的影响，同时也使你有了相对独立的开发环境。分支具有很重要的意义。创建并切换分支，提交代码后才能在其它机器拉分支代码 git checkout -b new_branch 查看当前分支 git branch 切换到master分支 git checkout master 合并分支到当前分支，合并分支的操作是从new_branch合并到master分支，当前环境在master分支。 git merge new_branch 删除分支 git branch -d new_branch git冲突文件编辑冲突文件冲突的地方如下面这样 冲突标记&lt;&lt;&lt;&lt;&lt;&lt;&lt; （7个&lt;）与=======之间的内容是我的修改，=======与&gt;&gt;&gt;&gt;&gt;&gt;&gt;之间的内容是别人的修改。此时，还没有任何其它垃圾文件产生。 git顺利的提交代码流程查看修改的文件 git status 为了谨慎检查一下代码 git diff 添加修改的文件，新加的文件也是直接add就好了你需要把代码合并好后重新走一遍代码提交流程就好了。 git add dirname1/filename1.py dirname2/filenam2.py 添加修改的日志 git commit -m “fixed:修改了上传文件的逻辑” 提交代码git push，如果提交失败的可能原因是本地代码库版本不是最新。 创建和使用git ssh key首先设置git的user name和email git config –global user.name “xxx”git config –global user.email “&#120;&#x78;&#120;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;“ 查看git配置 git config –list 然后生成SHH密匙查看是否已经有了ssh密钥：cd ~/.ssh如果没有密钥则不会有此文件夹，有则备份删除生成密钥 ssh-keygen -t rsa -C “&#x61;&#117;&#x74;&#x68;&#122;&#x6a;&#x40;&#x67;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;“ 按3个回车，密码为空这里一般不使用密钥。最后得到了两个文件：id_rsa和id_rsa.pub注意：密匙生成就不要改了，如果已经生成到~/.ssh文件夹下去找。","categories":[],"tags":[]},{"title":"PHP的错误机制总结","slug":"error","date":"2016-04-26T12:15:46.000Z","updated":"2021-02-23T08:28:54.620Z","comments":true,"path":"2016/04/26/error/","link":"","permalink":"http://www.fixblog.cn/2016/04/26/error/","excerpt":"","text":"PHP的错误机制也是非常复杂的，做了几年php，也没有仔细总结过，现在就补上这一课。 特别说明：文章的PHP版本使用5.5.32 PHP的错误级别首先需要了解php有哪些错误。截至到php5.5，一共有16个错误级别 注意：尝试下面的代码的时候请确保打开error_log: error_reporting(E_ALL);ini_set(‘display_errors’, ‘On’); E_ERROR这种错误是致命错误，会在页面显示Fatal Error， 当出现这种错误的时候，程序就无法继续执行下去了 错误示例： // Fatal error: Call to undefined function hpinfo() in /tmp/php/index.php on line 5hpinfo(); //E_ERROR注意，如果有未被捕获的异常，也是会触发这个级别的。 E_WARNING这种错误只是警告，不会终止脚本，程序还会继续进行，显示的错误信息是Warning。比如include一个不存在的文件。 //Warning: include(a.php): failed to open stream: No such file or directory in &gt; &gt; &gt; /tmp/php/index.php on line 7//Warning: include(): Failed opening ‘a.php’ for inclusion &gt;&gt;(include_path=’.:/usr/share/pear:/usr/share/php’) in /tmp/php/index.php on line 7include(“a.php”); //E_WARNING E_NOTICE这种错误程度更为轻微一些，提示你这个地方不应该这么写。这个也是运行时错误，这个错误的代码可能在其他地方没有问题，只是在当前上下文情况下出现了问题。 比如$b变量不存在，我们把它赋值给另外一个变量 //Notice: Undefined variable: b in /tmp/php/index.php on line 9$a = $b; //E_NOTICE E_PARSE这个错误是编译时候发生的，在编译期发现语法错误，不能进行语法分析。 比如下面的z没有设置为变量。 // Parse error: syntax error, unexpected ‘=’ in /tmp/php/index.php on line 20z=1; // E_PARSE E_STRICT这个错误是PHP5之后引入的，你的代码可以运行，但是不是PHP建议的写法。比如在函数形参传递++符号 // Strict Standards: Only variables should be passed by reference in /tmp/php/index.php on &gt; line 17function change (&amp;$var) {$var += 10; } $var = 1; change(++$var); // E_STRICT E_RECOVERABLE_ERROR这个级别其实是ERROR级别的，但是它是期望被捕获的，如果没有被错误处理捕获，表现和E_ERROR是一样的。经常出现在形参定义了类型，但调用的时候传入了错误类型。它的错误提醒也比E_ERROR的fatal error前面多了一个Catachable的字样。 //Catchable fatal error: Argument 1 passed to testCall() must be an instance of A, instance of B given, called in /tmp/php/index.php on line 37 and defined in /tmp/php/index.php on line 33class A {}class B {}function testCall(A $a) {}$b = new B();testCall($b); E_DEPRECATED这个错误表示你用了一个旧版本的函数，而这个函数后期版本可能被禁用或者不维护了。比如curl的CURLOPT_POSTFIELDS使用@FILENAME来上传文件的方法 // Deprecated: curl_setopt(): The usage of the @filename API for file uploading is deprecated. Please use the CURLFile class instead in /tmp/php/index.php on line 42$ch = curl_init(“http://www.remotesite.com/upload.php&quot;);curl_setopt($ch, CURLOPT_POSTFIELDS, array(‘fileupload’ =&gt; ‘@’. “test”)); E_CORE_ERROR, E_CORE_WARNING这两个错误是由PHP的引擎产生的，在PHP初始化过程中发生。 E_COMPILE_ERROR, E_COMPILE_WARNING这两个错误是由PHP引擎产生的，在编译过程中发生。 E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE, E_USER_DEPRECATED,这些错误都是用户制造的，使用trigger_error，这里就相当于一个口子给用户触发出各种错误类型。这个是一个很好逃避try catch异常的方式。 trigger_error(“Cannot divide by zero”, E_USER_ERROR);// E_USER_ERROR// E_USER_WARING// E_USER_NOTICE// E_USER_DEPRECATED E_ALLE_STRICT出外的所有错误和警告信息。 错误控制php中有很多配置和参数是可以控制错误，以及错误的日志显示的。第一步，我们需要了解的是php中的有关错误的配置有哪些？我们按照php+php-fpm的模型来说，会影响php错误显示的其实是有两个配置文件，一个是php本身的配置文件php.ini，另外一个是php-fpm的配置文件，php-fpm.conf。 php.ini中的配置 error_reporting = E_ALL // 报告错误级别，什么级别的error_log = /tmp/php_errors.log // php中的错误显示的日志位置display_errors = On // 是否把错误展示在输出上，这个输出可能是页面，也可能是stdoutdisplay_startup_errors = On // 是否把启动过程的错误信息显示在页面上，记得上面说的有几个Core类型的错误是启动时候发生的，这个就是控制这些错误是否显示页面的。log_errors = On // 是否要记录错误日志log_errors_max_len = 1024 // 错误日志的最大长度ignore_repeated_errors = Off // 是否忽略重复的错误track_errors = Off // 是否使用全局变量$php_errormsg来记录最后一个错误xmlrpc_errors = 0 //是否使用XML-RPC的错误信息格式记录错误xmlrpc_error_number = 0 // 用作 XML-RPC faultCode 元素的值。html_errors = On // 是否把输出中的函数等信息变为HTML链接docref_root = http://manual/en/ // 如果html_errors开启了，这个链接的根路径是什么fastcgi.logging = 0 // 是否把php错误抛出到fastcgi中 我们经常会被问到，error_reporting和display_errors有什么区别呢？这两个函数是完全不一样的。 PHP默认是会在日志和标准输出（如果是fpm模式标准输出就是页面） error_reporting的参数是错误级别。表示什么样子的级别才应该触发错误。如果我们告诉PHP，所有错误级别都不需要触发错误，那么，不管是日志，还是页面，都不会显示这个错误，就相当于什么都没有发生。 display_errors是控制是否要在标准输出展示错误信息log_errors则是控制是否要在日志中记录错误信息。 error_log是显示错误日志的位置，这个在php-fpm中往往会被重写，于是往往会发现的是cli和fpm的错误日志竟然不是在同一个文件中。 ignore_repeated_errors这个标记控制的是如果有重复的日志，那么就只会记录一条，比如下面的程序： error_reporting(E_ALL);ini_set(‘ignore_repeated_errors’, 1);ini_set(‘ignore_repeated_source’, 1);$a = $c; $a = $c; //E_NOTICE//Notice: Undefined variable: c in /tmp/php/index.php on line 20 本来会出现两次NOTICE的，但是现在，只会出现一次了… track_errors开启会把最后一个错误信息存储到变量里面去，这个可能在对记日志的时候会有一些用处吧。不过我觉得真是没啥用… html_errors 和 docref_root 两个是个挺有人性化的配置，配置了这两个参数以后，我们返回的错误信息中如果有一些在文档中有的信息，就会变成链接形式。 error_reporting(E_ALL);ini_set(‘html_errors’, 1);ini_set(‘docref_root’, “https://secure.php.net/manual/zh/&quot;);include(“a2.php”); //E_WARNING 能让你快速定位到我们出现错误的地方。是不是很人性～ php-fpm中的配置 error_log = /var/log/php-fpm/error.log // php-fpm自身的日志log_level = notice // php-fpm自身的日志记录级别php_flag[display_errors] = off // 覆盖php.ini中的某个配置变量，可被程序中的ini_set覆盖php_value[display_errors] = off // 同php_flagphp_admin_value[error_log] = /tmp/www-error.log // 覆盖php.ini中的某个配置变量，不可被程序中的ini_set覆盖php_admin_flag[log_errors] = on // 同php_admin_valuecatch_workers_output = yes // 是否抓取fpmworker的输出request_slowlog_timeout = 0 // 慢日志时长slowlog = /var/log/php-fpm/www-slow.log // 慢日志记录 php-fpm的配置中也有一个error_log配置，这个很经常会和php.ini中的error_log配置弄混。但他们记录的东西是不一样的，php-fpm的error_log只记录php-fpm本身的日志，比如fpm启动，关闭。 而php.ini中的error_log是记录php程序本身的错误日志。 那么在php-fpm中要覆盖php.ini中的error_log配置，就需要使用到下面几个函数： php_flag php_value php_admin_flag php_admin_value 这四个函数admin的两个函数说明这个变量设置完之后，不能在代码中使用ini_set把这个变量重新赋值了。而php_flag/value就仍然以php代码中的ini_set为准。 slowlog是fpm记录的，可以使用request_slowlog_timeout设置判断慢日志的时长。","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"php","slug":"php","permalink":"http://www.fixblog.cn/tags/php/"},{"name":"mysql","slug":"mysql","permalink":"http://www.fixblog.cn/tags/mysql/"},{"name":"linux hexo","slug":"linux-hexo","permalink":"http://www.fixblog.cn/tags/linux-hexo/"}]}